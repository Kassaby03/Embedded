
mspnew.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c6e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00002c6e  00002ce2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002610  00000000  00000000  00002d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ee8  00000000  00000000  0000531c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00006204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000064f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008538  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009639  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a5bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a73c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a9fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b28c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 a1 14 	call	0x2942	; 0x2942 <main>
      7a:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e6       	ldi	r26, 0x66	; 102
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	86 e6       	ldi	r24, 0x66	; 102
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	66 e6       	ldi	r22, 0x66	; 102
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__ltsf2+0x56>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__ltsf2+0x56>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__ltsf2+0x58>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <MDIO_vSetBitDir>:
#include "LIB/BIT.H"
#include "LIB/STD_TYPES1.h"
#include <avr/io.h>
#include "dio_init.h"
void MDIO_vSetBitDir(u8 A_u8PortNo,u8 A_u8BitNo,u8 A_u8BitDir    )
{   if((A_u8PortNo<=DIO_PORTD)&&(A_u8BitNo<=DIO_PIN7)&&(A_u8BitDir<=DIO_OUTPUT)){
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <MDIO_vSetBitDir+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <MDIO_vSetBitDir+0x8>
     c96:	0f 92       	push	r0
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	89 83       	std	Y+1, r24	; 0x01
     c9e:	6a 83       	std	Y+2, r22	; 0x02
     ca0:	4b 83       	std	Y+3, r20	; 0x03
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	84 30       	cpi	r24, 0x04	; 4
     ca6:	08 f0       	brcs	.+2      	; 0xcaa <MDIO_vSetBitDir+0x1c>
     ca8:	b1 c0       	rjmp	.+354    	; 0xe0c <MDIO_vSetBitDir+0x17e>
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	88 30       	cpi	r24, 0x08	; 8
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <MDIO_vSetBitDir+0x24>
     cb0:	ad c0       	rjmp	.+346    	; 0xe0c <MDIO_vSetBitDir+0x17e>
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	82 30       	cpi	r24, 0x02	; 2
     cb6:	08 f0       	brcs	.+2      	; 0xcba <MDIO_vSetBitDir+0x2c>
     cb8:	a9 c0       	rjmp	.+338    	; 0xe0c <MDIO_vSetBitDir+0x17e>
	switch(A_u8PortNo){
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	3d 83       	std	Y+5, r19	; 0x05
     cc2:	2c 83       	std	Y+4, r18	; 0x04
     cc4:	6c 81       	ldd	r22, Y+4	; 0x04
     cc6:	7d 81       	ldd	r23, Y+5	; 0x05
     cc8:	61 30       	cpi	r22, 0x01	; 1
     cca:	71 05       	cpc	r23, r1
     ccc:	d1 f1       	breq	.+116    	; 0xd42 <MDIO_vSetBitDir+0xb4>
     cce:	8c 81       	ldd	r24, Y+4	; 0x04
     cd0:	9d 81       	ldd	r25, Y+5	; 0x05
     cd2:	82 30       	cpi	r24, 0x02	; 2
     cd4:	91 05       	cpc	r25, r1
     cd6:	34 f4       	brge	.+12     	; 0xce4 <MDIO_vSetBitDir+0x56>
     cd8:	2c 81       	ldd	r18, Y+4	; 0x04
     cda:	3d 81       	ldd	r19, Y+5	; 0x05
     cdc:	21 15       	cp	r18, r1
     cde:	31 05       	cpc	r19, r1
     ce0:	71 f0       	breq	.+28     	; 0xcfe <MDIO_vSetBitDir+0x70>
     ce2:	94 c0       	rjmp	.+296    	; 0xe0c <MDIO_vSetBitDir+0x17e>
     ce4:	6c 81       	ldd	r22, Y+4	; 0x04
     ce6:	7d 81       	ldd	r23, Y+5	; 0x05
     ce8:	62 30       	cpi	r22, 0x02	; 2
     cea:	71 05       	cpc	r23, r1
     cec:	09 f4       	brne	.+2      	; 0xcf0 <MDIO_vSetBitDir+0x62>
     cee:	4b c0       	rjmp	.+150    	; 0xd86 <MDIO_vSetBitDir+0xf8>
     cf0:	8c 81       	ldd	r24, Y+4	; 0x04
     cf2:	9d 81       	ldd	r25, Y+5	; 0x05
     cf4:	83 30       	cpi	r24, 0x03	; 3
     cf6:	91 05       	cpc	r25, r1
     cf8:	09 f4       	brne	.+2      	; 0xcfc <MDIO_vSetBitDir+0x6e>
     cfa:	67 c0       	rjmp	.+206    	; 0xdca <MDIO_vSetBitDir+0x13c>
     cfc:	87 c0       	rjmp	.+270    	; 0xe0c <MDIO_vSetBitDir+0x17e>
	case DIO_PORTA:
	WRT_BIT(DDRA,A_u8BitNo,A_u8BitDir);
     cfe:	aa e3       	ldi	r26, 0x3A	; 58
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ea e3       	ldi	r30, 0x3A	; 58
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <MDIO_vSetBitDir+0x8c>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	2a 95       	dec	r18
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <MDIO_vSetBitDir+0x88>
     d1e:	80 95       	com	r24
     d20:	48 23       	and	r20, r24
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	88 2f       	mov	r24, r24
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	b9 01       	movw	r22, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <MDIO_vSetBitDir+0xa8>
     d32:	66 0f       	add	r22, r22
     d34:	77 1f       	adc	r23, r23
     d36:	8a 95       	dec	r24
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <MDIO_vSetBitDir+0xa4>
     d3a:	cb 01       	movw	r24, r22
     d3c:	84 2b       	or	r24, r20
     d3e:	8c 93       	st	X, r24
     d40:	65 c0       	rjmp	.+202    	; 0xe0c <MDIO_vSetBitDir+0x17e>
	break;
	case DIO_PORTB:
	WRT_BIT(DDRB,A_u8BitNo,A_u8BitDir);
     d42:	a7 e3       	ldi	r26, 0x37	; 55
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e7 e3       	ldi	r30, 0x37	; 55
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	48 2f       	mov	r20, r24
     d4e:	8a 81       	ldd	r24, Y+2	; 0x02
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <MDIO_vSetBitDir+0xd0>
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	2a 95       	dec	r18
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <MDIO_vSetBitDir+0xcc>
     d62:	80 95       	com	r24
     d64:	48 23       	and	r20, r24
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	88 2f       	mov	r24, r24
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	b9 01       	movw	r22, r18
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <MDIO_vSetBitDir+0xec>
     d76:	66 0f       	add	r22, r22
     d78:	77 1f       	adc	r23, r23
     d7a:	8a 95       	dec	r24
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <MDIO_vSetBitDir+0xe8>
     d7e:	cb 01       	movw	r24, r22
     d80:	84 2b       	or	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	43 c0       	rjmp	.+134    	; 0xe0c <MDIO_vSetBitDir+0x17e>
	break;
	case DIO_PORTC:
	WRT_BIT(DDRC,A_u8BitNo,A_u8BitDir);
     d86:	a4 e3       	ldi	r26, 0x34	; 52
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e4 e3       	ldi	r30, 0x34	; 52
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <MDIO_vSetBitDir+0x114>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	2a 95       	dec	r18
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <MDIO_vSetBitDir+0x110>
     da6:	80 95       	com	r24
     da8:	48 23       	and	r20, r24
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	b9 01       	movw	r22, r18
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <MDIO_vSetBitDir+0x130>
     dba:	66 0f       	add	r22, r22
     dbc:	77 1f       	adc	r23, r23
     dbe:	8a 95       	dec	r24
     dc0:	e2 f7       	brpl	.-8      	; 0xdba <MDIO_vSetBitDir+0x12c>
     dc2:	cb 01       	movw	r24, r22
     dc4:	84 2b       	or	r24, r20
     dc6:	8c 93       	st	X, r24
     dc8:	21 c0       	rjmp	.+66     	; 0xe0c <MDIO_vSetBitDir+0x17e>
	break;
	case DIO_PORTD:
	WRT_BIT(DDRD,A_u8BitNo,A_u8BitDir);
     dca:	a1 e3       	ldi	r26, 0x31	; 49
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e1 e3       	ldi	r30, 0x31	; 49
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	48 2f       	mov	r20, r24
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <MDIO_vSetBitDir+0x158>
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	2a 95       	dec	r18
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <MDIO_vSetBitDir+0x154>
     dea:	80 95       	com	r24
     dec:	48 23       	and	r20, r24
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	88 2f       	mov	r24, r24
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	b9 01       	movw	r22, r18
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <MDIO_vSetBitDir+0x174>
     dfe:	66 0f       	add	r22, r22
     e00:	77 1f       	adc	r23, r23
     e02:	8a 95       	dec	r24
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <MDIO_vSetBitDir+0x170>
     e06:	cb 01       	movw	r24, r22
     e08:	84 2b       	or	r24, r20
     e0a:	8c 93       	st	X, r24
	break;
	}
}
}
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <MDIO_vSetBitVal>:

void MDIO_vSetBitVal(u8 A_u8PortNo,u8 A_u8BitNo,u8 A_u8BitVal )
{   if((A_u8PortNo<=DIO_PORTD)&&(A_u8BitNo<=DIO_PIN7)&&(A_u8BitVal<=DIO_HIGH)){
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	00 d0       	rcall	.+0      	; 0xe22 <MDIO_vSetBitVal+0x6>
     e22:	00 d0       	rcall	.+0      	; 0xe24 <MDIO_vSetBitVal+0x8>
     e24:	0f 92       	push	r0
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	89 83       	std	Y+1, r24	; 0x01
     e2c:	6a 83       	std	Y+2, r22	; 0x02
     e2e:	4b 83       	std	Y+3, r20	; 0x03
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	84 30       	cpi	r24, 0x04	; 4
     e34:	08 f0       	brcs	.+2      	; 0xe38 <MDIO_vSetBitVal+0x1c>
     e36:	b1 c0       	rjmp	.+354    	; 0xf9a <MDIO_vSetBitVal+0x17e>
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	88 30       	cpi	r24, 0x08	; 8
     e3c:	08 f0       	brcs	.+2      	; 0xe40 <MDIO_vSetBitVal+0x24>
     e3e:	ad c0       	rjmp	.+346    	; 0xf9a <MDIO_vSetBitVal+0x17e>
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	82 30       	cpi	r24, 0x02	; 2
     e44:	08 f0       	brcs	.+2      	; 0xe48 <MDIO_vSetBitVal+0x2c>
     e46:	a9 c0       	rjmp	.+338    	; 0xf9a <MDIO_vSetBitVal+0x17e>
	switch(A_u8PortNo){
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	3d 83       	std	Y+5, r19	; 0x05
     e50:	2c 83       	std	Y+4, r18	; 0x04
     e52:	6c 81       	ldd	r22, Y+4	; 0x04
     e54:	7d 81       	ldd	r23, Y+5	; 0x05
     e56:	61 30       	cpi	r22, 0x01	; 1
     e58:	71 05       	cpc	r23, r1
     e5a:	d1 f1       	breq	.+116    	; 0xed0 <MDIO_vSetBitVal+0xb4>
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	82 30       	cpi	r24, 0x02	; 2
     e62:	91 05       	cpc	r25, r1
     e64:	34 f4       	brge	.+12     	; 0xe72 <MDIO_vSetBitVal+0x56>
     e66:	2c 81       	ldd	r18, Y+4	; 0x04
     e68:	3d 81       	ldd	r19, Y+5	; 0x05
     e6a:	21 15       	cp	r18, r1
     e6c:	31 05       	cpc	r19, r1
     e6e:	71 f0       	breq	.+28     	; 0xe8c <MDIO_vSetBitVal+0x70>
     e70:	94 c0       	rjmp	.+296    	; 0xf9a <MDIO_vSetBitVal+0x17e>
     e72:	6c 81       	ldd	r22, Y+4	; 0x04
     e74:	7d 81       	ldd	r23, Y+5	; 0x05
     e76:	62 30       	cpi	r22, 0x02	; 2
     e78:	71 05       	cpc	r23, r1
     e7a:	09 f4       	brne	.+2      	; 0xe7e <MDIO_vSetBitVal+0x62>
     e7c:	4b c0       	rjmp	.+150    	; 0xf14 <MDIO_vSetBitVal+0xf8>
     e7e:	8c 81       	ldd	r24, Y+4	; 0x04
     e80:	9d 81       	ldd	r25, Y+5	; 0x05
     e82:	83 30       	cpi	r24, 0x03	; 3
     e84:	91 05       	cpc	r25, r1
     e86:	09 f4       	brne	.+2      	; 0xe8a <MDIO_vSetBitVal+0x6e>
     e88:	67 c0       	rjmp	.+206    	; 0xf58 <MDIO_vSetBitVal+0x13c>
     e8a:	87 c0       	rjmp	.+270    	; 0xf9a <MDIO_vSetBitVal+0x17e>
		case DIO_PORTA:
		WRT_BIT(PORTA,A_u8BitNo,A_u8BitVal);
     e8c:	ab e3       	ldi	r26, 0x3B	; 59
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	eb e3       	ldi	r30, 0x3B	; 59
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <MDIO_vSetBitVal+0x8c>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	2a 95       	dec	r18
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <MDIO_vSetBitVal+0x88>
     eac:	80 95       	com	r24
     eae:	48 23       	and	r20, r24
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	88 2f       	mov	r24, r24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	b9 01       	movw	r22, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <MDIO_vSetBitVal+0xa8>
     ec0:	66 0f       	add	r22, r22
     ec2:	77 1f       	adc	r23, r23
     ec4:	8a 95       	dec	r24
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <MDIO_vSetBitVal+0xa4>
     ec8:	cb 01       	movw	r24, r22
     eca:	84 2b       	or	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	65 c0       	rjmp	.+202    	; 0xf9a <MDIO_vSetBitVal+0x17e>
		break;
		case DIO_PORTB:
		WRT_BIT(PORTB,A_u8BitNo,A_u8BitVal);
     ed0:	a8 e3       	ldi	r26, 0x38	; 56
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e8 e3       	ldi	r30, 0x38	; 56
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <MDIO_vSetBitVal+0xd0>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	2a 95       	dec	r18
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <MDIO_vSetBitVal+0xcc>
     ef0:	80 95       	com	r24
     ef2:	48 23       	and	r20, r24
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	b9 01       	movw	r22, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <MDIO_vSetBitVal+0xec>
     f04:	66 0f       	add	r22, r22
     f06:	77 1f       	adc	r23, r23
     f08:	8a 95       	dec	r24
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <MDIO_vSetBitVal+0xe8>
     f0c:	cb 01       	movw	r24, r22
     f0e:	84 2b       	or	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	43 c0       	rjmp	.+134    	; 0xf9a <MDIO_vSetBitVal+0x17e>
		break;
		case DIO_PORTC:
		WRT_BIT(PORTC,A_u8BitNo,A_u8BitVal);
     f14:	a5 e3       	ldi	r26, 0x35	; 53
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e5 e3       	ldi	r30, 0x35	; 53
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <MDIO_vSetBitVal+0x114>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	2a 95       	dec	r18
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <MDIO_vSetBitVal+0x110>
     f34:	80 95       	com	r24
     f36:	48 23       	and	r20, r24
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	b9 01       	movw	r22, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <MDIO_vSetBitVal+0x130>
     f48:	66 0f       	add	r22, r22
     f4a:	77 1f       	adc	r23, r23
     f4c:	8a 95       	dec	r24
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <MDIO_vSetBitVal+0x12c>
     f50:	cb 01       	movw	r24, r22
     f52:	84 2b       	or	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	21 c0       	rjmp	.+66     	; 0xf9a <MDIO_vSetBitVal+0x17e>
		break;
		case DIO_PORTD:
		WRT_BIT(PORTD,A_u8BitNo,A_u8BitVal);
     f58:	a2 e3       	ldi	r26, 0x32	; 50
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e2 e3       	ldi	r30, 0x32	; 50
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	48 2f       	mov	r20, r24
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <MDIO_vSetBitVal+0x158>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	2a 95       	dec	r18
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <MDIO_vSetBitVal+0x154>
     f78:	80 95       	com	r24
     f7a:	48 23       	and	r20, r24
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	b9 01       	movw	r22, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <MDIO_vSetBitVal+0x174>
     f8c:	66 0f       	add	r22, r22
     f8e:	77 1f       	adc	r23, r23
     f90:	8a 95       	dec	r24
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <MDIO_vSetBitVal+0x170>
     f94:	cb 01       	movw	r24, r22
     f96:	84 2b       	or	r24, r20
     f98:	8c 93       	st	X, r24
		break;

	}}
}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <MDIO_u8vGetBitVal>:



u8 MDIO_u8vGetBitVal(u8 A_u8PortNo , u8 A_u8BitNo                ){
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <MDIO_u8vGetBitVal+0x6>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <MDIO_u8vGetBitVal+0x8>
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	8a 83       	std	Y+2, r24	; 0x02
     fba:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8BitVal;
	 if((A_u8PortNo<=DIO_PORTD)&&(A_u8BitNo<=DIO_PIN7)){
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	84 30       	cpi	r24, 0x04	; 4
     fc0:	08 f0       	brcs	.+2      	; 0xfc4 <MDIO_u8vGetBitVal+0x1a>
     fc2:	9d c0       	rjmp	.+314    	; 0x10fe <MDIO_u8vGetBitVal+0x154>
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	88 30       	cpi	r24, 0x08	; 8
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <MDIO_u8vGetBitVal+0x22>
     fca:	99 c0       	rjmp	.+306    	; 0x10fe <MDIO_u8vGetBitVal+0x154>
		switch(A_u8PortNo){
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	3d 83       	std	Y+5, r19	; 0x05
     fd4:	2c 83       	std	Y+4, r18	; 0x04
     fd6:	4c 81       	ldd	r20, Y+4	; 0x04
     fd8:	5d 81       	ldd	r21, Y+5	; 0x05
     fda:	41 30       	cpi	r20, 0x01	; 1
     fdc:	51 05       	cpc	r21, r1
     fde:	b1 f1       	breq	.+108    	; 0x104c <MDIO_u8vGetBitVal+0xa2>
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	9d 81       	ldd	r25, Y+5	; 0x05
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	91 05       	cpc	r25, r1
     fe8:	34 f4       	brge	.+12     	; 0xff6 <MDIO_u8vGetBitVal+0x4c>
     fea:	2c 81       	ldd	r18, Y+4	; 0x04
     fec:	3d 81       	ldd	r19, Y+5	; 0x05
     fee:	21 15       	cp	r18, r1
     ff0:	31 05       	cpc	r19, r1
     ff2:	71 f0       	breq	.+28     	; 0x1010 <MDIO_u8vGetBitVal+0x66>
     ff4:	84 c0       	rjmp	.+264    	; 0x10fe <MDIO_u8vGetBitVal+0x154>
     ff6:	4c 81       	ldd	r20, Y+4	; 0x04
     ff8:	5d 81       	ldd	r21, Y+5	; 0x05
     ffa:	42 30       	cpi	r20, 0x02	; 2
     ffc:	51 05       	cpc	r21, r1
     ffe:	09 f4       	brne	.+2      	; 0x1002 <MDIO_u8vGetBitVal+0x58>
    1000:	43 c0       	rjmp	.+134    	; 0x1088 <MDIO_u8vGetBitVal+0xde>
    1002:	8c 81       	ldd	r24, Y+4	; 0x04
    1004:	9d 81       	ldd	r25, Y+5	; 0x05
    1006:	83 30       	cpi	r24, 0x03	; 3
    1008:	91 05       	cpc	r25, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <MDIO_u8vGetBitVal+0x64>
    100c:	5b c0       	rjmp	.+182    	; 0x10c4 <MDIO_u8vGetBitVal+0x11a>
    100e:	77 c0       	rjmp	.+238    	; 0x10fe <MDIO_u8vGetBitVal+0x154>
		case DIO_PORTA:
		L_u8BitVal=GET_BIT(PINA,A_u8BitNo);
    1010:	e9 e3       	ldi	r30, 0x39	; 57
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 c0       	rjmp	.+4      	; 0x102a <MDIO_u8vGetBitVal+0x80>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	2a 95       	dec	r18
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <MDIO_u8vGetBitVal+0x7c>
    102e:	9a 01       	movw	r18, r20
    1030:	28 23       	and	r18, r24
    1032:	39 23       	and	r19, r25
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	88 2f       	mov	r24, r24
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	a9 01       	movw	r20, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <MDIO_u8vGetBitVal+0x98>
    103e:	55 95       	asr	r21
    1040:	47 95       	ror	r20
    1042:	8a 95       	dec	r24
    1044:	e2 f7       	brpl	.-8      	; 0x103e <MDIO_u8vGetBitVal+0x94>
    1046:	ca 01       	movw	r24, r20
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	59 c0       	rjmp	.+178    	; 0x10fe <MDIO_u8vGetBitVal+0x154>
		break;
		case DIO_PORTB:
		L_u8BitVal=GET_BIT(PINB,A_u8BitNo);
    104c:	e6 e3       	ldi	r30, 0x36	; 54
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <MDIO_u8vGetBitVal+0xbc>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	2a 95       	dec	r18
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <MDIO_u8vGetBitVal+0xb8>
    106a:	9a 01       	movw	r18, r20
    106c:	28 23       	and	r18, r24
    106e:	39 23       	and	r19, r25
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	a9 01       	movw	r20, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <MDIO_u8vGetBitVal+0xd4>
    107a:	55 95       	asr	r21
    107c:	47 95       	ror	r20
    107e:	8a 95       	dec	r24
    1080:	e2 f7       	brpl	.-8      	; 0x107a <MDIO_u8vGetBitVal+0xd0>
    1082:	ca 01       	movw	r24, r20
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	3b c0       	rjmp	.+118    	; 0x10fe <MDIO_u8vGetBitVal+0x154>
		break;
		case DIO_PORTC:
		L_u8BitVal=GET_BIT(PINC,A_u8BitNo);
    1088:	e3 e3       	ldi	r30, 0x33	; 51
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <MDIO_u8vGetBitVal+0xf8>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	2a 95       	dec	r18
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <MDIO_u8vGetBitVal+0xf4>
    10a6:	9a 01       	movw	r18, r20
    10a8:	28 23       	and	r18, r24
    10aa:	39 23       	and	r19, r25
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	88 2f       	mov	r24, r24
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	a9 01       	movw	r20, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <MDIO_u8vGetBitVal+0x110>
    10b6:	55 95       	asr	r21
    10b8:	47 95       	ror	r20
    10ba:	8a 95       	dec	r24
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <MDIO_u8vGetBitVal+0x10c>
    10be:	ca 01       	movw	r24, r20
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	1d c0       	rjmp	.+58     	; 0x10fe <MDIO_u8vGetBitVal+0x154>
		break;
		case DIO_PORTD:
		L_u8BitVal=GET_BIT(PIND,A_u8BitNo);
    10c4:	e0 e3       	ldi	r30, 0x30	; 48
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <MDIO_u8vGetBitVal+0x134>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	2a 95       	dec	r18
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <MDIO_u8vGetBitVal+0x130>
    10e2:	9a 01       	movw	r18, r20
    10e4:	28 23       	and	r18, r24
    10e6:	39 23       	and	r19, r25
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	88 2f       	mov	r24, r24
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a9 01       	movw	r20, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <MDIO_u8vGetBitVal+0x14c>
    10f2:	55 95       	asr	r21
    10f4:	47 95       	ror	r20
    10f6:	8a 95       	dec	r24
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <MDIO_u8vGetBitVal+0x148>
    10fa:	ca 01       	movw	r24, r20
    10fc:	89 83       	std	Y+1, r24	; 0x01
		break;
		}
	}
return L_u8BitVal;
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <MDIO_vTogBit>:

void MDIO_vTogBit(u8 A_u8PortNo , u8 A_u8BitNo                   )
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	00 d0       	rcall	.+0      	; 0x1116 <MDIO_vTogBit+0x6>
    1116:	00 d0       	rcall	.+0      	; 0x1118 <MDIO_vTogBit+0x8>
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	6a 83       	std	Y+2, r22	; 0x02

	 if((A_u8PortNo<=DIO_PORTD)&&(A_u8BitNo<=DIO_PIN7)){
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	84 30       	cpi	r24, 0x04	; 4
    1124:	08 f0       	brcs	.+2      	; 0x1128 <MDIO_vTogBit+0x18>
    1126:	72 c0       	rjmp	.+228    	; 0x120c <MDIO_vTogBit+0xfc>
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	88 30       	cpi	r24, 0x08	; 8
    112c:	08 f0       	brcs	.+2      	; 0x1130 <MDIO_vTogBit+0x20>
    112e:	6e c0       	rjmp	.+220    	; 0x120c <MDIO_vTogBit+0xfc>
			switch(A_u8PortNo){
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	3c 83       	std	Y+4, r19	; 0x04
    1138:	2b 83       	std	Y+3, r18	; 0x03
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	91 05       	cpc	r25, r1
    1142:	49 f1       	breq	.+82     	; 0x1196 <MDIO_vTogBit+0x86>
    1144:	2b 81       	ldd	r18, Y+3	; 0x03
    1146:	3c 81       	ldd	r19, Y+4	; 0x04
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	2c f4       	brge	.+10     	; 0x1158 <MDIO_vTogBit+0x48>
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	9c 81       	ldd	r25, Y+4	; 0x04
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	61 f0       	breq	.+24     	; 0x116e <MDIO_vTogBit+0x5e>
    1156:	5a c0       	rjmp	.+180    	; 0x120c <MDIO_vTogBit+0xfc>
    1158:	2b 81       	ldd	r18, Y+3	; 0x03
    115a:	3c 81       	ldd	r19, Y+4	; 0x04
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	71 f1       	breq	.+92     	; 0x11be <MDIO_vTogBit+0xae>
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	83 30       	cpi	r24, 0x03	; 3
    1168:	91 05       	cpc	r25, r1
    116a:	e9 f1       	breq	.+122    	; 0x11e6 <MDIO_vTogBit+0xd6>
    116c:	4f c0       	rjmp	.+158    	; 0x120c <MDIO_vTogBit+0xfc>
			case DIO_PORTA:
			TOG_BIT(PORTA,A_u8BitNo);
    116e:	ab e3       	ldi	r26, 0x3B	; 59
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	eb e3       	ldi	r30, 0x3B	; 59
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	48 2f       	mov	r20, r24
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 2e       	mov	r0, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <MDIO_vTogBit+0x7c>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	0a 94       	dec	r0
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <MDIO_vTogBit+0x78>
    1190:	84 27       	eor	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	3b c0       	rjmp	.+118    	; 0x120c <MDIO_vTogBit+0xfc>
			break;
			case DIO_PORTB:
			TOG_BIT(PORTB,A_u8BitNo);
    1196:	a8 e3       	ldi	r26, 0x38	; 56
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e8 e3       	ldi	r30, 0x38	; 56
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 2e       	mov	r0, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <MDIO_vTogBit+0xa4>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <MDIO_vTogBit+0xa0>
    11b8:	84 27       	eor	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	27 c0       	rjmp	.+78     	; 0x120c <MDIO_vTogBit+0xfc>
			break;
			case DIO_PORTC:
			TOG_BIT(PORTC,A_u8BitNo);
    11be:	a5 e3       	ldi	r26, 0x35	; 53
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e5 e3       	ldi	r30, 0x35	; 53
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <MDIO_vTogBit+0xcc>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <MDIO_vTogBit+0xc8>
    11e0:	84 27       	eor	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	13 c0       	rjmp	.+38     	; 0x120c <MDIO_vTogBit+0xfc>
			break;
			case DIO_PORTD:
			TOG_BIT(PORTD,A_u8BitNo);
    11e6:	a2 e3       	ldi	r26, 0x32	; 50
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e2 e3       	ldi	r30, 0x32	; 50
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <MDIO_vTogBit+0xf4>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <MDIO_vTogBit+0xf0>
    1208:	84 27       	eor	r24, r20
    120a:	8c 93       	st	X, r24
			break;
			}
}
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <MDIO_vSetPortDir>:
void MDIO_vSetPortDir(u8 A_u8PortNo ,  u8 A_u8PortDir            )
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	00 d0       	rcall	.+0      	; 0x1220 <MDIO_vSetPortDir+0x6>
    1220:	00 d0       	rcall	.+0      	; 0x1222 <MDIO_vSetPortDir+0x8>
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	89 83       	std	Y+1, r24	; 0x01
    1228:	6a 83       	std	Y+2, r22	; 0x02
	 if((A_u8PortNo<=DIO_PORTD)){
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	84 30       	cpi	r24, 0x04	; 4
    122e:	90 f5       	brcc	.+100    	; 0x1294 <MDIO_vSetPortDir+0x7a>
				switch(A_u8PortNo){
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	3c 83       	std	Y+4, r19	; 0x04
    1238:	2b 83       	std	Y+3, r18	; 0x03
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	91 05       	cpc	r25, r1
    1242:	d1 f0       	breq	.+52     	; 0x1278 <MDIO_vSetPortDir+0x5e>
    1244:	2b 81       	ldd	r18, Y+3	; 0x03
    1246:	3c 81       	ldd	r19, Y+4	; 0x04
    1248:	22 30       	cpi	r18, 0x02	; 2
    124a:	31 05       	cpc	r19, r1
    124c:	2c f4       	brge	.+10     	; 0x1258 <MDIO_vSetPortDir+0x3e>
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	61 f0       	breq	.+24     	; 0x126e <MDIO_vSetPortDir+0x54>
    1256:	1e c0       	rjmp	.+60     	; 0x1294 <MDIO_vSetPortDir+0x7a>
    1258:	2b 81       	ldd	r18, Y+3	; 0x03
    125a:	3c 81       	ldd	r19, Y+4	; 0x04
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	81 f0       	breq	.+32     	; 0x1282 <MDIO_vSetPortDir+0x68>
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	83 30       	cpi	r24, 0x03	; 3
    1268:	91 05       	cpc	r25, r1
    126a:	81 f0       	breq	.+32     	; 0x128c <MDIO_vSetPortDir+0x72>
    126c:	13 c0       	rjmp	.+38     	; 0x1294 <MDIO_vSetPortDir+0x7a>
				case DIO_PORTA:
				DDRA= A_u8PortDir ;
    126e:	ea e3       	ldi	r30, 0x3A	; 58
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	80 83       	st	Z, r24
    1276:	0e c0       	rjmp	.+28     	; 0x1294 <MDIO_vSetPortDir+0x7a>
				break;
				case DIO_PORTB:
				DDRB= A_u8PortDir ;
    1278:	e7 e3       	ldi	r30, 0x37	; 55
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	80 83       	st	Z, r24
    1280:	09 c0       	rjmp	.+18     	; 0x1294 <MDIO_vSetPortDir+0x7a>
				break;
				case DIO_PORTC:
				DDRC=A_u8PortDir ;
    1282:	e4 e3       	ldi	r30, 0x34	; 52
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	80 83       	st	Z, r24
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <MDIO_vSetPortDir+0x7a>
				break;
				case DIO_PORTD:
				DDRD=A_u8PortDir ;
    128c:	e1 e3       	ldi	r30, 0x31	; 49
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	80 83       	st	Z, r24
				break;
				}
}
}
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <MDIO_vSetPortVal>:
void MDIO_vSetPortVal(u8 A_u8PortNo , u8 A_u8PortVal             )
{
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <MDIO_vSetPortVal+0x6>
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <MDIO_vSetPortVal+0x8>
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	6a 83       	std	Y+2, r22	; 0x02
	 if((A_u8PortNo<=DIO_PORTD)){
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	84 30       	cpi	r24, 0x04	; 4
    12b6:	90 f5       	brcc	.+100    	; 0x131c <MDIO_vSetPortVal+0x7a>
					switch(A_u8PortNo){
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	3c 83       	std	Y+4, r19	; 0x04
    12c0:	2b 83       	std	Y+3, r18	; 0x03
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	91 05       	cpc	r25, r1
    12ca:	d1 f0       	breq	.+52     	; 0x1300 <MDIO_vSetPortVal+0x5e>
    12cc:	2b 81       	ldd	r18, Y+3	; 0x03
    12ce:	3c 81       	ldd	r19, Y+4	; 0x04
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	2c f4       	brge	.+10     	; 0x12e0 <MDIO_vSetPortVal+0x3e>
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	61 f0       	breq	.+24     	; 0x12f6 <MDIO_vSetPortVal+0x54>
    12de:	1e c0       	rjmp	.+60     	; 0x131c <MDIO_vSetPortVal+0x7a>
    12e0:	2b 81       	ldd	r18, Y+3	; 0x03
    12e2:	3c 81       	ldd	r19, Y+4	; 0x04
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	81 f0       	breq	.+32     	; 0x130a <MDIO_vSetPortVal+0x68>
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	83 30       	cpi	r24, 0x03	; 3
    12f0:	91 05       	cpc	r25, r1
    12f2:	81 f0       	breq	.+32     	; 0x1314 <MDIO_vSetPortVal+0x72>
    12f4:	13 c0       	rjmp	.+38     	; 0x131c <MDIO_vSetPortVal+0x7a>
					case DIO_PORTA:
					PORTA= A_u8PortVal ;
    12f6:	eb e3       	ldi	r30, 0x3B	; 59
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	80 83       	st	Z, r24
    12fe:	0e c0       	rjmp	.+28     	; 0x131c <MDIO_vSetPortVal+0x7a>
					break;
					case DIO_PORTB:
					PORTB= A_u8PortVal ;
    1300:	e8 e3       	ldi	r30, 0x38	; 56
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	80 83       	st	Z, r24
    1308:	09 c0       	rjmp	.+18     	; 0x131c <MDIO_vSetPortVal+0x7a>
					break;
					case DIO_PORTC:
					PORTC=A_u8PortVal ;
    130a:	e5 e3       	ldi	r30, 0x35	; 53
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	80 83       	st	Z, r24
    1312:	04 c0       	rjmp	.+8      	; 0x131c <MDIO_vSetPortVal+0x7a>
					break;
					case DIO_PORTD:
					PORTD=A_u8PortVal ;
    1314:	e2 e3       	ldi	r30, 0x32	; 50
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	80 83       	st	Z, r24
					break;
					}
	 }

}
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <HSSD_Init>:
#include "../../LIB/STD_TYPES1.h"
#include "Private.h"
#include "ssd_init.h"
#include "../../MCAL/dio/dio_init.h"
void HSSD_Init(u8 A_u8PortNo)
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	0f 92       	push	r0
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	89 83       	std	Y+1, r24	; 0x01
	MDIO_vSetPortDir(A_u8PortNo,0xff);
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	6f ef       	ldi	r22, 0xFF	; 255
    133a:	0e 94 0d 09 	call	0x121a	; 0x121a <MDIO_vSetPortDir>

}
    133e:	0f 90       	pop	r0
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <HSSD_vSSDPrintNo>:
void HSSD_vSSDPrintNo(u8 A_u8PortNo,u8 A_u8Num)
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	61 97       	sbiw	r28, 0x11	; 17
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	8b 87       	std	Y+11, r24	; 0x0b
    135c:	6c 87       	std	Y+12, r22	; 0x0c
	u8 arr[10]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    135e:	ce 01       	movw	r24, r28
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	9e 87       	std	Y+14, r25	; 0x0e
    1364:	8d 87       	std	Y+13, r24	; 0x0d
    1366:	ee e6       	ldi	r30, 0x6E	; 110
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	f8 8b       	std	Y+16, r31	; 0x10
    136c:	ef 87       	std	Y+15, r30	; 0x0f
    136e:	fa e0       	ldi	r31, 0x0A	; 10
    1370:	f9 8b       	std	Y+17, r31	; 0x11
    1372:	ef 85       	ldd	r30, Y+15	; 0x0f
    1374:	f8 89       	ldd	r31, Y+16	; 0x10
    1376:	00 80       	ld	r0, Z
    1378:	8f 85       	ldd	r24, Y+15	; 0x0f
    137a:	98 89       	ldd	r25, Y+16	; 0x10
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	98 8b       	std	Y+16, r25	; 0x10
    1380:	8f 87       	std	Y+15, r24	; 0x0f
    1382:	ed 85       	ldd	r30, Y+13	; 0x0d
    1384:	fe 85       	ldd	r31, Y+14	; 0x0e
    1386:	00 82       	st	Z, r0
    1388:	8d 85       	ldd	r24, Y+13	; 0x0d
    138a:	9e 85       	ldd	r25, Y+14	; 0x0e
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	9e 87       	std	Y+14, r25	; 0x0e
    1390:	8d 87       	std	Y+13, r24	; 0x0d
    1392:	99 89       	ldd	r25, Y+17	; 0x11
    1394:	91 50       	subi	r25, 0x01	; 1
    1396:	99 8b       	std	Y+17, r25	; 0x11
    1398:	e9 89       	ldd	r30, Y+17	; 0x11
    139a:	ee 23       	and	r30, r30
    139c:	51 f7       	brne	.-44     	; 0x1372 <HSSD_vSSDPrintNo+0x2c>
	MDIO_vSetPortVal(A_u8PortNo, arr[A_u8Num]);
    139e:	8c 85       	ldd	r24, Y+12	; 0x0c
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	ce 01       	movw	r24, r28
    13a6:	01 96       	adiw	r24, 0x01	; 1
    13a8:	fc 01       	movw	r30, r24
    13aa:	e2 0f       	add	r30, r18
    13ac:	f3 1f       	adc	r31, r19
    13ae:	90 81       	ld	r25, Z
    13b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    13b2:	69 2f       	mov	r22, r25
    13b4:	0e 94 51 09 	call	0x12a2	; 0x12a2 <MDIO_vSetPortVal>


}
    13b8:	61 96       	adiw	r28, 0x11	; 17
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <HLED_vLEDInit>:
 */
#include"../../LIB/STD_TYPES1.h"
#include"../../MCAL/dio/dio_init.h"
#include"LED_init.h"
void HLED_vLEDInit(u8 A_u8PortNo,u8 A_u8BitNo)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <HLED_vLEDInit+0x6>
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	6a 83       	std	Y+2, r22	; 0x02

	MDIO_vSetBitDir(A_u8PortNo,A_u8BitNo,DIO_OUTPUT);
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	6a 81       	ldd	r22, Y+2	; 0x02
    13dc:	41 e0       	ldi	r20, 0x01	; 1
    13de:	0e 94 47 06 	call	0xc8e	; 0xc8e <MDIO_vSetBitDir>


}
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <HLED_vLEDon>:
void HLED_vLEDon(u8 A_u8PortNo, u8 A_u8BitNo)
{
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <HLED_vLEDon+0x6>
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	6a 83       	std	Y+2, r22	; 0x02


	MDIO_vSetBitVal(A_u8PortNo,A_u8BitNo,DIO_HIGH);
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	6a 81       	ldd	r22, Y+2	; 0x02
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MDIO_vSetBitVal>

}
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <HLED_vLEDoff>:
void HLED_vLEDoff(u8 A_u8PortNo,u8 A_u8BitNo)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	00 d0       	rcall	.+0      	; 0x1414 <HLED_vLEDoff+0x6>
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	6a 83       	std	Y+2, r22	; 0x02


	MDIO_vSetBitVal(A_u8PortNo,A_u8BitNo,DIO_LOW);
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	6a 81       	ldd	r22, Y+2	; 0x02
    1420:	40 e0       	ldi	r20, 0x00	; 0
    1422:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MDIO_vSetBitVal>

}
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <HLCD_vSendCommand>:

#define RS  DIO_PIN0
#define RW  DIO_PIN1
#define E   DIO_PIN2
void HLCD_vSendCommand(u8 L_u8Data)
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	6d 97       	sbiw	r28, 0x1d	; 29
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	8d 8f       	std	Y+29, r24	; 0x1d
	    MDIO_vSetBitVal(LCD_ControlPORT,RS,DIO_LOW);
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MDIO_vSetBitVal>
		MDIO_vSetBitVal(LCD_ControlPORT,RW,DIO_LOW);
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	61 e0       	ldi	r22, 0x01	; 1
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MDIO_vSetBitVal>

		MDIO_vSetPortVal(LCD_DATAPORT,L_u8Data);
    145a:	83 e0       	ldi	r24, 0x03	; 3
    145c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    145e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <MDIO_vSetPortVal>

		MDIO_vSetBitVal(LCD_ControlPORT,E,DIO_HIGH);
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	62 e0       	ldi	r22, 0x02	; 2
    1466:	41 e0       	ldi	r20, 0x01	; 1
    1468:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MDIO_vSetBitVal>
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a0 e8       	ldi	r26, 0x80	; 128
    1472:	bf e3       	ldi	r27, 0x3F	; 63
    1474:	89 8f       	std	Y+25, r24	; 0x19
    1476:	9a 8f       	std	Y+26, r25	; 0x1a
    1478:	ab 8f       	std	Y+27, r26	; 0x1b
    147a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    147c:	69 8d       	ldd	r22, Y+25	; 0x19
    147e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1480:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1482:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	4a e7       	ldi	r20, 0x7A	; 122
    148a:	53 e4       	ldi	r21, 0x43	; 67
    148c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	8d 8b       	std	Y+21, r24	; 0x15
    1496:	9e 8b       	std	Y+22, r25	; 0x16
    1498:	af 8b       	std	Y+23, r26	; 0x17
    149a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    149c:	6d 89       	ldd	r22, Y+21	; 0x15
    149e:	7e 89       	ldd	r23, Y+22	; 0x16
    14a0:	8f 89       	ldd	r24, Y+23	; 0x17
    14a2:	98 8d       	ldd	r25, Y+24	; 0x18
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e8       	ldi	r20, 0x80	; 128
    14aa:	5f e3       	ldi	r21, 0x3F	; 63
    14ac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14b0:	88 23       	and	r24, r24
    14b2:	2c f4       	brge	.+10     	; 0x14be <HLCD_vSendCommand+0x8e>
		__ticks = 1;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	9c 8b       	std	Y+20, r25	; 0x14
    14ba:	8b 8b       	std	Y+19, r24	; 0x13
    14bc:	3f c0       	rjmp	.+126    	; 0x153c <HLCD_vSendCommand+0x10c>
	else if (__tmp > 65535)
    14be:	6d 89       	ldd	r22, Y+21	; 0x15
    14c0:	7e 89       	ldd	r23, Y+22	; 0x16
    14c2:	8f 89       	ldd	r24, Y+23	; 0x17
    14c4:	98 8d       	ldd	r25, Y+24	; 0x18
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	3f ef       	ldi	r19, 0xFF	; 255
    14ca:	4f e7       	ldi	r20, 0x7F	; 127
    14cc:	57 e4       	ldi	r21, 0x47	; 71
    14ce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14d2:	18 16       	cp	r1, r24
    14d4:	4c f5       	brge	.+82     	; 0x1528 <HLCD_vSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d6:	69 8d       	ldd	r22, Y+25	; 0x19
    14d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e2       	ldi	r20, 0x20	; 32
    14e4:	51 e4       	ldi	r21, 0x41	; 65
    14e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	bc 01       	movw	r22, r24
    14f0:	cd 01       	movw	r24, r26
    14f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	9c 8b       	std	Y+20, r25	; 0x14
    14fc:	8b 8b       	std	Y+19, r24	; 0x13
    14fe:	0f c0       	rjmp	.+30     	; 0x151e <HLCD_vSendCommand+0xee>
    1500:	89 e1       	ldi	r24, 0x19	; 25
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	9a 8b       	std	Y+18, r25	; 0x12
    1506:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1508:	89 89       	ldd	r24, Y+17	; 0x11
    150a:	9a 89       	ldd	r25, Y+18	; 0x12
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <HLCD_vSendCommand+0xdc>
    1510:	9a 8b       	std	Y+18, r25	; 0x12
    1512:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1514:	8b 89       	ldd	r24, Y+19	; 0x13
    1516:	9c 89       	ldd	r25, Y+20	; 0x14
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	9c 8b       	std	Y+20, r25	; 0x14
    151c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    151e:	8b 89       	ldd	r24, Y+19	; 0x13
    1520:	9c 89       	ldd	r25, Y+20	; 0x14
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	69 f7       	brne	.-38     	; 0x1500 <HLCD_vSendCommand+0xd0>
    1526:	14 c0       	rjmp	.+40     	; 0x1550 <HLCD_vSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1528:	6d 89       	ldd	r22, Y+21	; 0x15
    152a:	7e 89       	ldd	r23, Y+22	; 0x16
    152c:	8f 89       	ldd	r24, Y+23	; 0x17
    152e:	98 8d       	ldd	r25, Y+24	; 0x18
    1530:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	9c 8b       	std	Y+20, r25	; 0x14
    153a:	8b 8b       	std	Y+19, r24	; 0x13
    153c:	8b 89       	ldd	r24, Y+19	; 0x13
    153e:	9c 89       	ldd	r25, Y+20	; 0x14
    1540:	98 8b       	std	Y+16, r25	; 0x10
    1542:	8f 87       	std	Y+15, r24	; 0x0f
    1544:	8f 85       	ldd	r24, Y+15	; 0x0f
    1546:	98 89       	ldd	r25, Y+16	; 0x10
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	f1 f7       	brne	.-4      	; 0x1548 <HLCD_vSendCommand+0x118>
    154c:	98 8b       	std	Y+16, r25	; 0x10
    154e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		MDIO_vSetBitVal(LCD_ControlPORT,E,DIO_LOW);
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	62 e0       	ldi	r22, 0x02	; 2
    1554:	40 e0       	ldi	r20, 0x00	; 0
    1556:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MDIO_vSetBitVal>
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a0 e8       	ldi	r26, 0x80	; 128
    1560:	bf e3       	ldi	r27, 0x3F	; 63
    1562:	8b 87       	std	Y+11, r24	; 0x0b
    1564:	9c 87       	std	Y+12, r25	; 0x0c
    1566:	ad 87       	std	Y+13, r26	; 0x0d
    1568:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156a:	6b 85       	ldd	r22, Y+11	; 0x0b
    156c:	7c 85       	ldd	r23, Y+12	; 0x0c
    156e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1570:	9e 85       	ldd	r25, Y+14	; 0x0e
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	4a e7       	ldi	r20, 0x7A	; 122
    1578:	53 e4       	ldi	r21, 0x43	; 67
    157a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	8f 83       	std	Y+7, r24	; 0x07
    1584:	98 87       	std	Y+8, r25	; 0x08
    1586:	a9 87       	std	Y+9, r26	; 0x09
    1588:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    158a:	6f 81       	ldd	r22, Y+7	; 0x07
    158c:	78 85       	ldd	r23, Y+8	; 0x08
    158e:	89 85       	ldd	r24, Y+9	; 0x09
    1590:	9a 85       	ldd	r25, Y+10	; 0x0a
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e8       	ldi	r20, 0x80	; 128
    1598:	5f e3       	ldi	r21, 0x3F	; 63
    159a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    159e:	88 23       	and	r24, r24
    15a0:	2c f4       	brge	.+10     	; 0x15ac <HLCD_vSendCommand+0x17c>
		__ticks = 1;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9e 83       	std	Y+6, r25	; 0x06
    15a8:	8d 83       	std	Y+5, r24	; 0x05
    15aa:	3f c0       	rjmp	.+126    	; 0x162a <HLCD_vSendCommand+0x1fa>
	else if (__tmp > 65535)
    15ac:	6f 81       	ldd	r22, Y+7	; 0x07
    15ae:	78 85       	ldd	r23, Y+8	; 0x08
    15b0:	89 85       	ldd	r24, Y+9	; 0x09
    15b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	3f ef       	ldi	r19, 0xFF	; 255
    15b8:	4f e7       	ldi	r20, 0x7F	; 127
    15ba:	57 e4       	ldi	r21, 0x47	; 71
    15bc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15c0:	18 16       	cp	r1, r24
    15c2:	4c f5       	brge	.+82     	; 0x1616 <HLCD_vSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e2       	ldi	r20, 0x20	; 32
    15d2:	51 e4       	ldi	r21, 0x41	; 65
    15d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	bc 01       	movw	r22, r24
    15de:	cd 01       	movw	r24, r26
    15e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	9e 83       	std	Y+6, r25	; 0x06
    15ea:	8d 83       	std	Y+5, r24	; 0x05
    15ec:	0f c0       	rjmp	.+30     	; 0x160c <HLCD_vSendCommand+0x1dc>
    15ee:	89 e1       	ldi	r24, 0x19	; 25
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	9c 83       	std	Y+4, r25	; 0x04
    15f4:	8b 83       	std	Y+3, r24	; 0x03
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <HLCD_vSendCommand+0x1ca>
    15fe:	9c 83       	std	Y+4, r25	; 0x04
    1600:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	9e 81       	ldd	r25, Y+6	; 0x06
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	9e 81       	ldd	r25, Y+6	; 0x06
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	69 f7       	brne	.-38     	; 0x15ee <HLCD_vSendCommand+0x1be>
    1614:	14 c0       	rjmp	.+40     	; 0x163e <HLCD_vSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1616:	6f 81       	ldd	r22, Y+7	; 0x07
    1618:	78 85       	ldd	r23, Y+8	; 0x08
    161a:	89 85       	ldd	r24, Y+9	; 0x09
    161c:	9a 85       	ldd	r25, Y+10	; 0x0a
    161e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	9e 83       	std	Y+6, r25	; 0x06
    1628:	8d 83       	std	Y+5, r24	; 0x05
    162a:	8d 81       	ldd	r24, Y+5	; 0x05
    162c:	9e 81       	ldd	r25, Y+6	; 0x06
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	9a 81       	ldd	r25, Y+2	; 0x02
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <HLCD_vSendCommand+0x206>
    163a:	9a 83       	std	Y+2, r25	; 0x02
    163c:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(1);


}
    163e:	6d 96       	adiw	r28, 0x1d	; 29
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <HLCD_vSendData>:
void HLCD_vSendData(u8 L_u8Data)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	6d 97       	sbiw	r28, 0x1d	; 29
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	8d 8f       	std	Y+29, r24	; 0x1d


	MDIO_vSetBitVal(LCD_ControlPORT,RS,DIO_HIGH);
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	41 e0       	ldi	r20, 0x01	; 1
    166c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MDIO_vSetBitVal>
		MDIO_vSetBitVal(LCD_ControlPORT,RW,DIO_LOW);
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	61 e0       	ldi	r22, 0x01	; 1
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MDIO_vSetBitVal>
		MDIO_vSetPortVal(LCD_DATAPORT,L_u8Data);
    167a:	83 e0       	ldi	r24, 0x03	; 3
    167c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    167e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <MDIO_vSetPortVal>
		MDIO_vSetBitVal(LCD_ControlPORT,E,DIO_HIGH);
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	62 e0       	ldi	r22, 0x02	; 2
    1686:	41 e0       	ldi	r20, 0x01	; 1
    1688:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MDIO_vSetBitVal>
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	a0 e8       	ldi	r26, 0x80	; 128
    1692:	bf e3       	ldi	r27, 0x3F	; 63
    1694:	89 8f       	std	Y+25, r24	; 0x19
    1696:	9a 8f       	std	Y+26, r25	; 0x1a
    1698:	ab 8f       	std	Y+27, r26	; 0x1b
    169a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169c:	69 8d       	ldd	r22, Y+25	; 0x19
    169e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	4a e7       	ldi	r20, 0x7A	; 122
    16aa:	53 e4       	ldi	r21, 0x43	; 67
    16ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	8d 8b       	std	Y+21, r24	; 0x15
    16b6:	9e 8b       	std	Y+22, r25	; 0x16
    16b8:	af 8b       	std	Y+23, r26	; 0x17
    16ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16bc:	6d 89       	ldd	r22, Y+21	; 0x15
    16be:	7e 89       	ldd	r23, Y+22	; 0x16
    16c0:	8f 89       	ldd	r24, Y+23	; 0x17
    16c2:	98 8d       	ldd	r25, Y+24	; 0x18
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e8       	ldi	r20, 0x80	; 128
    16ca:	5f e3       	ldi	r21, 0x3F	; 63
    16cc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16d0:	88 23       	and	r24, r24
    16d2:	2c f4       	brge	.+10     	; 0x16de <HLCD_vSendData+0x8e>
		__ticks = 1;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	9c 8b       	std	Y+20, r25	; 0x14
    16da:	8b 8b       	std	Y+19, r24	; 0x13
    16dc:	3f c0       	rjmp	.+126    	; 0x175c <HLCD_vSendData+0x10c>
	else if (__tmp > 65535)
    16de:	6d 89       	ldd	r22, Y+21	; 0x15
    16e0:	7e 89       	ldd	r23, Y+22	; 0x16
    16e2:	8f 89       	ldd	r24, Y+23	; 0x17
    16e4:	98 8d       	ldd	r25, Y+24	; 0x18
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	3f ef       	ldi	r19, 0xFF	; 255
    16ea:	4f e7       	ldi	r20, 0x7F	; 127
    16ec:	57 e4       	ldi	r21, 0x47	; 71
    16ee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16f2:	18 16       	cp	r1, r24
    16f4:	4c f5       	brge	.+82     	; 0x1748 <HLCD_vSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f6:	69 8d       	ldd	r22, Y+25	; 0x19
    16f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e2       	ldi	r20, 0x20	; 32
    1704:	51 e4       	ldi	r21, 0x41	; 65
    1706:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	bc 01       	movw	r22, r24
    1710:	cd 01       	movw	r24, r26
    1712:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	9c 8b       	std	Y+20, r25	; 0x14
    171c:	8b 8b       	std	Y+19, r24	; 0x13
    171e:	0f c0       	rjmp	.+30     	; 0x173e <HLCD_vSendData+0xee>
    1720:	89 e1       	ldi	r24, 0x19	; 25
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9a 8b       	std	Y+18, r25	; 0x12
    1726:	89 8b       	std	Y+17, r24	; 0x11
    1728:	89 89       	ldd	r24, Y+17	; 0x11
    172a:	9a 89       	ldd	r25, Y+18	; 0x12
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	f1 f7       	brne	.-4      	; 0x172c <HLCD_vSendData+0xdc>
    1730:	9a 8b       	std	Y+18, r25	; 0x12
    1732:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1734:	8b 89       	ldd	r24, Y+19	; 0x13
    1736:	9c 89       	ldd	r25, Y+20	; 0x14
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	9c 8b       	std	Y+20, r25	; 0x14
    173c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173e:	8b 89       	ldd	r24, Y+19	; 0x13
    1740:	9c 89       	ldd	r25, Y+20	; 0x14
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	69 f7       	brne	.-38     	; 0x1720 <HLCD_vSendData+0xd0>
    1746:	14 c0       	rjmp	.+40     	; 0x1770 <HLCD_vSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1748:	6d 89       	ldd	r22, Y+21	; 0x15
    174a:	7e 89       	ldd	r23, Y+22	; 0x16
    174c:	8f 89       	ldd	r24, Y+23	; 0x17
    174e:	98 8d       	ldd	r25, Y+24	; 0x18
    1750:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	9c 8b       	std	Y+20, r25	; 0x14
    175a:	8b 8b       	std	Y+19, r24	; 0x13
    175c:	8b 89       	ldd	r24, Y+19	; 0x13
    175e:	9c 89       	ldd	r25, Y+20	; 0x14
    1760:	98 8b       	std	Y+16, r25	; 0x10
    1762:	8f 87       	std	Y+15, r24	; 0x0f
    1764:	8f 85       	ldd	r24, Y+15	; 0x0f
    1766:	98 89       	ldd	r25, Y+16	; 0x10
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	f1 f7       	brne	.-4      	; 0x1768 <HLCD_vSendData+0x118>
    176c:	98 8b       	std	Y+16, r25	; 0x10
    176e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		MDIO_vSetBitVal(LCD_ControlPORT,E,DIO_LOW);
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	62 e0       	ldi	r22, 0x02	; 2
    1774:	40 e0       	ldi	r20, 0x00	; 0
    1776:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MDIO_vSetBitVal>
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a0 e8       	ldi	r26, 0x80	; 128
    1780:	bf e3       	ldi	r27, 0x3F	; 63
    1782:	8b 87       	std	Y+11, r24	; 0x0b
    1784:	9c 87       	std	Y+12, r25	; 0x0c
    1786:	ad 87       	std	Y+13, r26	; 0x0d
    1788:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178a:	6b 85       	ldd	r22, Y+11	; 0x0b
    178c:	7c 85       	ldd	r23, Y+12	; 0x0c
    178e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1790:	9e 85       	ldd	r25, Y+14	; 0x0e
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	4a e7       	ldi	r20, 0x7A	; 122
    1798:	53 e4       	ldi	r21, 0x43	; 67
    179a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	8f 83       	std	Y+7, r24	; 0x07
    17a4:	98 87       	std	Y+8, r25	; 0x08
    17a6:	a9 87       	std	Y+9, r26	; 0x09
    17a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17aa:	6f 81       	ldd	r22, Y+7	; 0x07
    17ac:	78 85       	ldd	r23, Y+8	; 0x08
    17ae:	89 85       	ldd	r24, Y+9	; 0x09
    17b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e8       	ldi	r20, 0x80	; 128
    17b8:	5f e3       	ldi	r21, 0x3F	; 63
    17ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17be:	88 23       	and	r24, r24
    17c0:	2c f4       	brge	.+10     	; 0x17cc <HLCD_vSendData+0x17c>
		__ticks = 1;
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	9e 83       	std	Y+6, r25	; 0x06
    17c8:	8d 83       	std	Y+5, r24	; 0x05
    17ca:	3f c0       	rjmp	.+126    	; 0x184a <HLCD_vSendData+0x1fa>
	else if (__tmp > 65535)
    17cc:	6f 81       	ldd	r22, Y+7	; 0x07
    17ce:	78 85       	ldd	r23, Y+8	; 0x08
    17d0:	89 85       	ldd	r24, Y+9	; 0x09
    17d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	3f ef       	ldi	r19, 0xFF	; 255
    17d8:	4f e7       	ldi	r20, 0x7F	; 127
    17da:	57 e4       	ldi	r21, 0x47	; 71
    17dc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17e0:	18 16       	cp	r1, r24
    17e2:	4c f5       	brge	.+82     	; 0x1836 <HLCD_vSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e2       	ldi	r20, 0x20	; 32
    17f2:	51 e4       	ldi	r21, 0x41	; 65
    17f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	bc 01       	movw	r22, r24
    17fe:	cd 01       	movw	r24, r26
    1800:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	9e 83       	std	Y+6, r25	; 0x06
    180a:	8d 83       	std	Y+5, r24	; 0x05
    180c:	0f c0       	rjmp	.+30     	; 0x182c <HLCD_vSendData+0x1dc>
    180e:	89 e1       	ldi	r24, 0x19	; 25
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	9c 83       	std	Y+4, r25	; 0x04
    1814:	8b 83       	std	Y+3, r24	; 0x03
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	9c 81       	ldd	r25, Y+4	; 0x04
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	f1 f7       	brne	.-4      	; 0x181a <HLCD_vSendData+0x1ca>
    181e:	9c 83       	std	Y+4, r25	; 0x04
    1820:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	9e 81       	ldd	r25, Y+6	; 0x06
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	9e 83       	std	Y+6, r25	; 0x06
    182a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	9e 81       	ldd	r25, Y+6	; 0x06
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	69 f7       	brne	.-38     	; 0x180e <HLCD_vSendData+0x1be>
    1834:	14 c0       	rjmp	.+40     	; 0x185e <HLCD_vSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1836:	6f 81       	ldd	r22, Y+7	; 0x07
    1838:	78 85       	ldd	r23, Y+8	; 0x08
    183a:	89 85       	ldd	r24, Y+9	; 0x09
    183c:	9a 85       	ldd	r25, Y+10	; 0x0a
    183e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	9e 83       	std	Y+6, r25	; 0x06
    1848:	8d 83       	std	Y+5, r24	; 0x05
    184a:	8d 81       	ldd	r24, Y+5	; 0x05
    184c:	9e 81       	ldd	r25, Y+6	; 0x06
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	f1 f7       	brne	.-4      	; 0x1856 <HLCD_vSendData+0x206>
    185a:	9a 83       	std	Y+2, r25	; 0x02
    185c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

}
    185e:	6d 96       	adiw	r28, 0x1d	; 29
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	cd bf       	out	0x3d, r28	; 61
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <HLCD_vLCDInit>:
  void HLCD_vLCDInit(void)
{
    1870:	0f 93       	push	r16
    1872:	1f 93       	push	r17
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	cc 54       	subi	r28, 0x4C	; 76
    187e:	d0 40       	sbci	r29, 0x00	; 0
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
	MDIO_vSetPortDir(LCD_DATAPORT,0xff);
    188a:	83 e0       	ldi	r24, 0x03	; 3
    188c:	6f ef       	ldi	r22, 0xFF	; 255
    188e:	0e 94 0d 09 	call	0x121a	; 0x121a <MDIO_vSetPortDir>
	MDIO_vSetBitDir(LCD_ControlPORT,RS,DIO_OUTPUT);
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	60 e0       	ldi	r22, 0x00	; 0
    1896:	41 e0       	ldi	r20, 0x01	; 1
    1898:	0e 94 47 06 	call	0xc8e	; 0xc8e <MDIO_vSetBitDir>
	MDIO_vSetBitDir(LCD_ControlPORT,RW,DIO_OUTPUT);
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	61 e0       	ldi	r22, 0x01	; 1
    18a0:	41 e0       	ldi	r20, 0x01	; 1
    18a2:	0e 94 47 06 	call	0xc8e	; 0xc8e <MDIO_vSetBitDir>
	MDIO_vSetBitDir(LCD_ControlPORT,E,DIO_OUTPUT);
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	62 e0       	ldi	r22, 0x02	; 2
    18aa:	41 e0       	ldi	r20, 0x01	; 1
    18ac:	0e 94 47 06 	call	0xc8e	; 0xc8e <MDIO_vSetBitDir>
    18b0:	fe 01       	movw	r30, r28
    18b2:	e7 5b       	subi	r30, 0xB7	; 183
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	a8 e4       	ldi	r26, 0x48	; 72
    18bc:	b2 e4       	ldi	r27, 0x42	; 66
    18be:	80 83       	st	Z, r24
    18c0:	91 83       	std	Z+1, r25	; 0x01
    18c2:	a2 83       	std	Z+2, r26	; 0x02
    18c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c6:	8e 01       	movw	r16, r28
    18c8:	0b 5b       	subi	r16, 0xBB	; 187
    18ca:	1f 4f       	sbci	r17, 0xFF	; 255
    18cc:	fe 01       	movw	r30, r28
    18ce:	e7 5b       	subi	r30, 0xB7	; 183
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	60 81       	ld	r22, Z
    18d4:	71 81       	ldd	r23, Z+1	; 0x01
    18d6:	82 81       	ldd	r24, Z+2	; 0x02
    18d8:	93 81       	ldd	r25, Z+3	; 0x03
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	4a e7       	ldi	r20, 0x7A	; 122
    18e0:	53 e4       	ldi	r21, 0x43	; 67
    18e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	f8 01       	movw	r30, r16
    18ec:	80 83       	st	Z, r24
    18ee:	91 83       	std	Z+1, r25	; 0x01
    18f0:	a2 83       	std	Z+2, r26	; 0x02
    18f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18f4:	fe 01       	movw	r30, r28
    18f6:	eb 5b       	subi	r30, 0xBB	; 187
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	60 81       	ld	r22, Z
    18fc:	71 81       	ldd	r23, Z+1	; 0x01
    18fe:	82 81       	ldd	r24, Z+2	; 0x02
    1900:	93 81       	ldd	r25, Z+3	; 0x03
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e8       	ldi	r20, 0x80	; 128
    1908:	5f e3       	ldi	r21, 0x3F	; 63
    190a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    190e:	88 23       	and	r24, r24
    1910:	44 f4       	brge	.+16     	; 0x1922 <HLCD_vLCDInit+0xb2>
		__ticks = 1;
    1912:	fe 01       	movw	r30, r28
    1914:	ed 5b       	subi	r30, 0xBD	; 189
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	91 83       	std	Z+1, r25	; 0x01
    191e:	80 83       	st	Z, r24
    1920:	64 c0       	rjmp	.+200    	; 0x19ea <HLCD_vLCDInit+0x17a>
	else if (__tmp > 65535)
    1922:	fe 01       	movw	r30, r28
    1924:	eb 5b       	subi	r30, 0xBB	; 187
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	60 81       	ld	r22, Z
    192a:	71 81       	ldd	r23, Z+1	; 0x01
    192c:	82 81       	ldd	r24, Z+2	; 0x02
    192e:	93 81       	ldd	r25, Z+3	; 0x03
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	3f ef       	ldi	r19, 0xFF	; 255
    1934:	4f e7       	ldi	r20, 0x7F	; 127
    1936:	57 e4       	ldi	r21, 0x47	; 71
    1938:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    193c:	18 16       	cp	r1, r24
    193e:	0c f0       	brlt	.+2      	; 0x1942 <HLCD_vLCDInit+0xd2>
    1940:	43 c0       	rjmp	.+134    	; 0x19c8 <HLCD_vLCDInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1942:	fe 01       	movw	r30, r28
    1944:	e7 5b       	subi	r30, 0xB7	; 183
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	60 81       	ld	r22, Z
    194a:	71 81       	ldd	r23, Z+1	; 0x01
    194c:	82 81       	ldd	r24, Z+2	; 0x02
    194e:	93 81       	ldd	r25, Z+3	; 0x03
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e2       	ldi	r20, 0x20	; 32
    1956:	51 e4       	ldi	r21, 0x41	; 65
    1958:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	8e 01       	movw	r16, r28
    1962:	0d 5b       	subi	r16, 0xBD	; 189
    1964:	1f 4f       	sbci	r17, 0xFF	; 255
    1966:	bc 01       	movw	r22, r24
    1968:	cd 01       	movw	r24, r26
    196a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	f8 01       	movw	r30, r16
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	80 83       	st	Z, r24
    1978:	1f c0       	rjmp	.+62     	; 0x19b8 <HLCD_vLCDInit+0x148>
    197a:	fe 01       	movw	r30, r28
    197c:	ef 5b       	subi	r30, 0xBF	; 191
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	89 e1       	ldi	r24, 0x19	; 25
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	91 83       	std	Z+1, r25	; 0x01
    1986:	80 83       	st	Z, r24
    1988:	fe 01       	movw	r30, r28
    198a:	ef 5b       	subi	r30, 0xBF	; 191
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	80 81       	ld	r24, Z
    1990:	91 81       	ldd	r25, Z+1	; 0x01
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <HLCD_vLCDInit+0x122>
    1996:	fe 01       	movw	r30, r28
    1998:	ef 5b       	subi	r30, 0xBF	; 191
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	91 83       	std	Z+1, r25	; 0x01
    199e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a0:	de 01       	movw	r26, r28
    19a2:	ad 5b       	subi	r26, 0xBD	; 189
    19a4:	bf 4f       	sbci	r27, 0xFF	; 255
    19a6:	fe 01       	movw	r30, r28
    19a8:	ed 5b       	subi	r30, 0xBD	; 189
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	80 81       	ld	r24, Z
    19ae:	91 81       	ldd	r25, Z+1	; 0x01
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	11 96       	adiw	r26, 0x01	; 1
    19b4:	9c 93       	st	X, r25
    19b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b8:	fe 01       	movw	r30, r28
    19ba:	ed 5b       	subi	r30, 0xBD	; 189
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	80 81       	ld	r24, Z
    19c0:	91 81       	ldd	r25, Z+1	; 0x01
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	d1 f6       	brne	.-76     	; 0x197a <HLCD_vLCDInit+0x10a>
    19c6:	24 c0       	rjmp	.+72     	; 0x1a10 <HLCD_vLCDInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c8:	8e 01       	movw	r16, r28
    19ca:	0d 5b       	subi	r16, 0xBD	; 189
    19cc:	1f 4f       	sbci	r17, 0xFF	; 255
    19ce:	fe 01       	movw	r30, r28
    19d0:	eb 5b       	subi	r30, 0xBB	; 187
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	60 81       	ld	r22, Z
    19d6:	71 81       	ldd	r23, Z+1	; 0x01
    19d8:	82 81       	ldd	r24, Z+2	; 0x02
    19da:	93 81       	ldd	r25, Z+3	; 0x03
    19dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	f8 01       	movw	r30, r16
    19e6:	91 83       	std	Z+1, r25	; 0x01
    19e8:	80 83       	st	Z, r24
    19ea:	fe 01       	movw	r30, r28
    19ec:	ed 5b       	subi	r30, 0xBD	; 189
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	fe 01       	movw	r30, r28
    19f6:	ff 96       	adiw	r30, 0x3f	; 63
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	80 83       	st	Z, r24
    19fc:	fe 01       	movw	r30, r28
    19fe:	ff 96       	adiw	r30, 0x3f	; 63
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <HLCD_vLCDInit+0x194>
    1a08:	fe 01       	movw	r30, r28
    1a0a:	ff 96       	adiw	r30, 0x3f	; 63
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	80 83       	st	Z, r24

	_delay_ms(50);
	HLCD_vSendCommand(0b00111000);
    1a10:	88 e3       	ldi	r24, 0x38	; 56
    1a12:	0e 94 18 0a 	call	0x1430	; 0x1430 <HLCD_vSendCommand>
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	a8 e4       	ldi	r26, 0x48	; 72
    1a1c:	b2 e4       	ldi	r27, 0x42	; 66
    1a1e:	8b af       	std	Y+59, r24	; 0x3b
    1a20:	9c af       	std	Y+60, r25	; 0x3c
    1a22:	ad af       	std	Y+61, r26	; 0x3d
    1a24:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a26:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a28:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a2e:	2b ea       	ldi	r18, 0xAB	; 171
    1a30:	3a ea       	ldi	r19, 0xAA	; 170
    1a32:	4a ea       	ldi	r20, 0xAA	; 170
    1a34:	5e e3       	ldi	r21, 0x3E	; 62
    1a36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	8f ab       	std	Y+55, r24	; 0x37
    1a40:	98 af       	std	Y+56, r25	; 0x38
    1a42:	a9 af       	std	Y+57, r26	; 0x39
    1a44:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a46:	6f a9       	ldd	r22, Y+55	; 0x37
    1a48:	78 ad       	ldd	r23, Y+56	; 0x38
    1a4a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a4c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	5f e3       	ldi	r21, 0x3F	; 63
    1a56:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a5a:	88 23       	and	r24, r24
    1a5c:	1c f4       	brge	.+6      	; 0x1a64 <HLCD_vLCDInit+0x1f4>
		__ticks = 1;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	8e ab       	std	Y+54, r24	; 0x36
    1a62:	91 c0       	rjmp	.+290    	; 0x1b86 <HLCD_vLCDInit+0x316>
	else if (__tmp > 255)
    1a64:	6f a9       	ldd	r22, Y+55	; 0x37
    1a66:	78 ad       	ldd	r23, Y+56	; 0x38
    1a68:	89 ad       	ldd	r24, Y+57	; 0x39
    1a6a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	4f e7       	ldi	r20, 0x7F	; 127
    1a72:	53 e4       	ldi	r21, 0x43	; 67
    1a74:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a78:	18 16       	cp	r1, r24
    1a7a:	0c f0       	brlt	.+2      	; 0x1a7e <HLCD_vLCDInit+0x20e>
    1a7c:	7b c0       	rjmp	.+246    	; 0x1b74 <HLCD_vLCDInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    1a7e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a80:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a82:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a84:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	4a e7       	ldi	r20, 0x7A	; 122
    1a8c:	54 e4       	ldi	r21, 0x44	; 68
    1a8e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	8a ab       	std	Y+50, r24	; 0x32
    1a98:	9b ab       	std	Y+51, r25	; 0x33
    1a9a:	ac ab       	std	Y+52, r26	; 0x34
    1a9c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9e:	6a a9       	ldd	r22, Y+50	; 0x32
    1aa0:	7b a9       	ldd	r23, Y+51	; 0x33
    1aa2:	8c a9       	ldd	r24, Y+52	; 0x34
    1aa4:	9d a9       	ldd	r25, Y+53	; 0x35
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4a e7       	ldi	r20, 0x7A	; 122
    1aac:	53 e4       	ldi	r21, 0x43	; 67
    1aae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	8e a7       	std	Y+46, r24	; 0x2e
    1ab8:	9f a7       	std	Y+47, r25	; 0x2f
    1aba:	a8 ab       	std	Y+48, r26	; 0x30
    1abc:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1abe:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ac0:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ac2:	88 a9       	ldd	r24, Y+48	; 0x30
    1ac4:	99 a9       	ldd	r25, Y+49	; 0x31
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e8       	ldi	r20, 0x80	; 128
    1acc:	5f e3       	ldi	r21, 0x3F	; 63
    1ace:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ad2:	88 23       	and	r24, r24
    1ad4:	2c f4       	brge	.+10     	; 0x1ae0 <HLCD_vLCDInit+0x270>
		__ticks = 1;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9d a7       	std	Y+45, r25	; 0x2d
    1adc:	8c a7       	std	Y+44, r24	; 0x2c
    1ade:	3f c0       	rjmp	.+126    	; 0x1b5e <HLCD_vLCDInit+0x2ee>
	else if (__tmp > 65535)
    1ae0:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ae2:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ae4:	88 a9       	ldd	r24, Y+48	; 0x30
    1ae6:	99 a9       	ldd	r25, Y+49	; 0x31
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	3f ef       	ldi	r19, 0xFF	; 255
    1aec:	4f e7       	ldi	r20, 0x7F	; 127
    1aee:	57 e4       	ldi	r21, 0x47	; 71
    1af0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1af4:	18 16       	cp	r1, r24
    1af6:	4c f5       	brge	.+82     	; 0x1b4a <HLCD_vLCDInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af8:	6a a9       	ldd	r22, Y+50	; 0x32
    1afa:	7b a9       	ldd	r23, Y+51	; 0x33
    1afc:	8c a9       	ldd	r24, Y+52	; 0x34
    1afe:	9d a9       	ldd	r25, Y+53	; 0x35
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e2       	ldi	r20, 0x20	; 32
    1b06:	51 e4       	ldi	r21, 0x41	; 65
    1b08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9d a7       	std	Y+45, r25	; 0x2d
    1b1e:	8c a7       	std	Y+44, r24	; 0x2c
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <HLCD_vLCDInit+0x2d0>
    1b22:	89 e1       	ldi	r24, 0x19	; 25
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	9b a7       	std	Y+43, r25	; 0x2b
    1b28:	8a a7       	std	Y+42, r24	; 0x2a
    1b2a:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b2c:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <HLCD_vLCDInit+0x2be>
    1b32:	9b a7       	std	Y+43, r25	; 0x2b
    1b34:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b36:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b38:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	9d a7       	std	Y+45, r25	; 0x2d
    1b3e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b40:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b42:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	69 f7       	brne	.-38     	; 0x1b22 <HLCD_vLCDInit+0x2b2>
    1b48:	24 c0       	rjmp	.+72     	; 0x1b92 <HLCD_vLCDInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b4c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b4e:	88 a9       	ldd	r24, Y+48	; 0x30
    1b50:	99 a9       	ldd	r25, Y+49	; 0x31
    1b52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9d a7       	std	Y+45, r25	; 0x2d
    1b5c:	8c a7       	std	Y+44, r24	; 0x2c
    1b5e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b60:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b62:	99 a7       	std	Y+41, r25	; 0x29
    1b64:	88 a7       	std	Y+40, r24	; 0x28
    1b66:	88 a5       	ldd	r24, Y+40	; 0x28
    1b68:	99 a5       	ldd	r25, Y+41	; 0x29
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <HLCD_vLCDInit+0x2fa>
    1b6e:	99 a7       	std	Y+41, r25	; 0x29
    1b70:	88 a7       	std	Y+40, r24	; 0x28
    1b72:	0f c0       	rjmp	.+30     	; 0x1b92 <HLCD_vLCDInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b74:	6f a9       	ldd	r22, Y+55	; 0x37
    1b76:	78 ad       	ldd	r23, Y+56	; 0x38
    1b78:	89 ad       	ldd	r24, Y+57	; 0x39
    1b7a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	8e ab       	std	Y+54, r24	; 0x36
    1b86:	8e a9       	ldd	r24, Y+54	; 0x36
    1b88:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b8a:	8f a1       	ldd	r24, Y+39	; 0x27
    1b8c:	8a 95       	dec	r24
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <HLCD_vLCDInit+0x31c>
    1b90:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	HLCD_vSendCommand(0b00001111);
    1b92:	8f e0       	ldi	r24, 0x0F	; 15
    1b94:	0e 94 18 0a 	call	0x1430	; 0x1430 <HLCD_vSendCommand>
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	a8 e4       	ldi	r26, 0x48	; 72
    1b9e:	b2 e4       	ldi	r27, 0x42	; 66
    1ba0:	8b a3       	std	Y+35, r24	; 0x23
    1ba2:	9c a3       	std	Y+36, r25	; 0x24
    1ba4:	ad a3       	std	Y+37, r26	; 0x25
    1ba6:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ba8:	6b a1       	ldd	r22, Y+35	; 0x23
    1baa:	7c a1       	ldd	r23, Y+36	; 0x24
    1bac:	8d a1       	ldd	r24, Y+37	; 0x25
    1bae:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb0:	2b ea       	ldi	r18, 0xAB	; 171
    1bb2:	3a ea       	ldi	r19, 0xAA	; 170
    1bb4:	4a ea       	ldi	r20, 0xAA	; 170
    1bb6:	5e e3       	ldi	r21, 0x3E	; 62
    1bb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	8f 8f       	std	Y+31, r24	; 0x1f
    1bc2:	98 a3       	std	Y+32, r25	; 0x20
    1bc4:	a9 a3       	std	Y+33, r26	; 0x21
    1bc6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1bc8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bca:	78 a1       	ldd	r23, Y+32	; 0x20
    1bcc:	89 a1       	ldd	r24, Y+33	; 0x21
    1bce:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e8       	ldi	r20, 0x80	; 128
    1bd6:	5f e3       	ldi	r21, 0x3F	; 63
    1bd8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bdc:	88 23       	and	r24, r24
    1bde:	1c f4       	brge	.+6      	; 0x1be6 <HLCD_vLCDInit+0x376>
		__ticks = 1;
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	8e 8f       	std	Y+30, r24	; 0x1e
    1be4:	91 c0       	rjmp	.+290    	; 0x1d08 <HLCD_vLCDInit+0x498>
	else if (__tmp > 255)
    1be6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1be8:	78 a1       	ldd	r23, Y+32	; 0x20
    1bea:	89 a1       	ldd	r24, Y+33	; 0x21
    1bec:	9a a1       	ldd	r25, Y+34	; 0x22
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4f e7       	ldi	r20, 0x7F	; 127
    1bf4:	53 e4       	ldi	r21, 0x43	; 67
    1bf6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bfa:	18 16       	cp	r1, r24
    1bfc:	0c f0       	brlt	.+2      	; 0x1c00 <HLCD_vLCDInit+0x390>
    1bfe:	7b c0       	rjmp	.+246    	; 0x1cf6 <HLCD_vLCDInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    1c00:	6b a1       	ldd	r22, Y+35	; 0x23
    1c02:	7c a1       	ldd	r23, Y+36	; 0x24
    1c04:	8d a1       	ldd	r24, Y+37	; 0x25
    1c06:	9e a1       	ldd	r25, Y+38	; 0x26
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	4a e7       	ldi	r20, 0x7A	; 122
    1c0e:	54 e4       	ldi	r21, 0x44	; 68
    1c10:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	8a 8f       	std	Y+26, r24	; 0x1a
    1c1a:	9b 8f       	std	Y+27, r25	; 0x1b
    1c1c:	ac 8f       	std	Y+28, r26	; 0x1c
    1c1e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c20:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c22:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c24:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c26:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4a e7       	ldi	r20, 0x7A	; 122
    1c2e:	53 e4       	ldi	r21, 0x43	; 67
    1c30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	8e 8b       	std	Y+22, r24	; 0x16
    1c3a:	9f 8b       	std	Y+23, r25	; 0x17
    1c3c:	a8 8f       	std	Y+24, r26	; 0x18
    1c3e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c40:	6e 89       	ldd	r22, Y+22	; 0x16
    1c42:	7f 89       	ldd	r23, Y+23	; 0x17
    1c44:	88 8d       	ldd	r24, Y+24	; 0x18
    1c46:	99 8d       	ldd	r25, Y+25	; 0x19
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e8       	ldi	r20, 0x80	; 128
    1c4e:	5f e3       	ldi	r21, 0x3F	; 63
    1c50:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c54:	88 23       	and	r24, r24
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <HLCD_vLCDInit+0x3f2>
		__ticks = 1;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9d 8b       	std	Y+21, r25	; 0x15
    1c5e:	8c 8b       	std	Y+20, r24	; 0x14
    1c60:	3f c0       	rjmp	.+126    	; 0x1ce0 <HLCD_vLCDInit+0x470>
	else if (__tmp > 65535)
    1c62:	6e 89       	ldd	r22, Y+22	; 0x16
    1c64:	7f 89       	ldd	r23, Y+23	; 0x17
    1c66:	88 8d       	ldd	r24, Y+24	; 0x18
    1c68:	99 8d       	ldd	r25, Y+25	; 0x19
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	3f ef       	ldi	r19, 0xFF	; 255
    1c6e:	4f e7       	ldi	r20, 0x7F	; 127
    1c70:	57 e4       	ldi	r21, 0x47	; 71
    1c72:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	4c f5       	brge	.+82     	; 0x1ccc <HLCD_vLCDInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c7c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c80:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e2       	ldi	r20, 0x20	; 32
    1c88:	51 e4       	ldi	r21, 0x41	; 65
    1c8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9d 8b       	std	Y+21, r25	; 0x15
    1ca0:	8c 8b       	std	Y+20, r24	; 0x14
    1ca2:	0f c0       	rjmp	.+30     	; 0x1cc2 <HLCD_vLCDInit+0x452>
    1ca4:	89 e1       	ldi	r24, 0x19	; 25
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9b 8b       	std	Y+19, r25	; 0x13
    1caa:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cac:	8a 89       	ldd	r24, Y+18	; 0x12
    1cae:	9b 89       	ldd	r25, Y+19	; 0x13
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <HLCD_vLCDInit+0x440>
    1cb4:	9b 8b       	std	Y+19, r25	; 0x13
    1cb6:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb8:	8c 89       	ldd	r24, Y+20	; 0x14
    1cba:	9d 89       	ldd	r25, Y+21	; 0x15
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	9d 8b       	std	Y+21, r25	; 0x15
    1cc0:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc2:	8c 89       	ldd	r24, Y+20	; 0x14
    1cc4:	9d 89       	ldd	r25, Y+21	; 0x15
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	69 f7       	brne	.-38     	; 0x1ca4 <HLCD_vLCDInit+0x434>
    1cca:	24 c0       	rjmp	.+72     	; 0x1d14 <HLCD_vLCDInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ccc:	6e 89       	ldd	r22, Y+22	; 0x16
    1cce:	7f 89       	ldd	r23, Y+23	; 0x17
    1cd0:	88 8d       	ldd	r24, Y+24	; 0x18
    1cd2:	99 8d       	ldd	r25, Y+25	; 0x19
    1cd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9d 8b       	std	Y+21, r25	; 0x15
    1cde:	8c 8b       	std	Y+20, r24	; 0x14
    1ce0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ce2:	9d 89       	ldd	r25, Y+21	; 0x15
    1ce4:	99 8b       	std	Y+17, r25	; 0x11
    1ce6:	88 8b       	std	Y+16, r24	; 0x10
    1ce8:	88 89       	ldd	r24, Y+16	; 0x10
    1cea:	99 89       	ldd	r25, Y+17	; 0x11
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <HLCD_vLCDInit+0x47c>
    1cf0:	99 8b       	std	Y+17, r25	; 0x11
    1cf2:	88 8b       	std	Y+16, r24	; 0x10
    1cf4:	0f c0       	rjmp	.+30     	; 0x1d14 <HLCD_vLCDInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cf6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1cf8:	78 a1       	ldd	r23, Y+32	; 0x20
    1cfa:	89 a1       	ldd	r24, Y+33	; 0x21
    1cfc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	8e 8f       	std	Y+30, r24	; 0x1e
    1d08:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d0a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d0e:	8a 95       	dec	r24
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <HLCD_vLCDInit+0x49e>
    1d12:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	HLCD_vSendCommand(0b00000001);
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	0e 94 18 0a 	call	0x1430	; 0x1430 <HLCD_vSendCommand>
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	a0 e0       	ldi	r26, 0x00	; 0
    1d20:	b0 e4       	ldi	r27, 0x40	; 64
    1d22:	8b 87       	std	Y+11, r24	; 0x0b
    1d24:	9c 87       	std	Y+12, r25	; 0x0c
    1d26:	ad 87       	std	Y+13, r26	; 0x0d
    1d28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	4a e7       	ldi	r20, 0x7A	; 122
    1d38:	53 e4       	ldi	r21, 0x43	; 67
    1d3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	8f 83       	std	Y+7, r24	; 0x07
    1d44:	98 87       	std	Y+8, r25	; 0x08
    1d46:	a9 87       	std	Y+9, r26	; 0x09
    1d48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4c:	78 85       	ldd	r23, Y+8	; 0x08
    1d4e:	89 85       	ldd	r24, Y+9	; 0x09
    1d50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e8       	ldi	r20, 0x80	; 128
    1d58:	5f e3       	ldi	r21, 0x3F	; 63
    1d5a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d5e:	88 23       	and	r24, r24
    1d60:	2c f4       	brge	.+10     	; 0x1d6c <HLCD_vLCDInit+0x4fc>
		__ticks = 1;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	9e 83       	std	Y+6, r25	; 0x06
    1d68:	8d 83       	std	Y+5, r24	; 0x05
    1d6a:	3f c0       	rjmp	.+126    	; 0x1dea <HLCD_vLCDInit+0x57a>
	else if (__tmp > 65535)
    1d6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6e:	78 85       	ldd	r23, Y+8	; 0x08
    1d70:	89 85       	ldd	r24, Y+9	; 0x09
    1d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	3f ef       	ldi	r19, 0xFF	; 255
    1d78:	4f e7       	ldi	r20, 0x7F	; 127
    1d7a:	57 e4       	ldi	r21, 0x47	; 71
    1d7c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d80:	18 16       	cp	r1, r24
    1d82:	4c f5       	brge	.+82     	; 0x1dd6 <HLCD_vLCDInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e2       	ldi	r20, 0x20	; 32
    1d92:	51 e4       	ldi	r21, 0x41	; 65
    1d94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	cd 01       	movw	r24, r26
    1da0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	9e 83       	std	Y+6, r25	; 0x06
    1daa:	8d 83       	std	Y+5, r24	; 0x05
    1dac:	0f c0       	rjmp	.+30     	; 0x1dcc <HLCD_vLCDInit+0x55c>
    1dae:	89 e1       	ldi	r24, 0x19	; 25
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	9c 83       	std	Y+4, r25	; 0x04
    1db4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <HLCD_vLCDInit+0x54a>
    1dbe:	9c 83       	std	Y+4, r25	; 0x04
    1dc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	9e 83       	std	Y+6, r25	; 0x06
    1dca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dce:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd0:	00 97       	sbiw	r24, 0x00	; 0
    1dd2:	69 f7       	brne	.-38     	; 0x1dae <HLCD_vLCDInit+0x53e>
    1dd4:	14 c0       	rjmp	.+40     	; 0x1dfe <HLCD_vLCDInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd8:	78 85       	ldd	r23, Y+8	; 0x08
    1dda:	89 85       	ldd	r24, Y+9	; 0x09
    1ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	9e 83       	std	Y+6, r25	; 0x06
    1de8:	8d 83       	std	Y+5, r24	; 0x05
    1dea:	8d 81       	ldd	r24, Y+5	; 0x05
    1dec:	9e 81       	ldd	r25, Y+6	; 0x06
    1dee:	9a 83       	std	Y+2, r25	; 0x02
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	9a 81       	ldd	r25, Y+2	; 0x02
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <HLCD_vLCDInit+0x586>
    1dfa:	9a 83       	std	Y+2, r25	; 0x02
    1dfc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HLCD_vSendCommand(0b00000110);
    1dfe:	86 e0       	ldi	r24, 0x06	; 6
    1e00:	0e 94 18 0a 	call	0x1430	; 0x1430 <HLCD_vSendCommand>


}
    1e04:	c4 5b       	subi	r28, 0xB4	; 180
    1e06:	df 4f       	sbci	r29, 0xFF	; 255
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	f8 94       	cli
    1e0c:	de bf       	out	0x3e, r29	; 62
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	cd bf       	out	0x3d, r28	; 61
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	1f 91       	pop	r17
    1e18:	0f 91       	pop	r16
    1e1a:	08 95       	ret

00001e1c <HLCD_vSendStr>:
void HLCD_vSendStr(u8*A_u8Ptr)
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <HLCD_vSendStr+0x6>
    1e22:	0f 92       	push	r0
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	9b 83       	std	Y+3, r25	; 0x03
    1e2a:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8var;
	for(L_u8var=0;A_u8Ptr[L_u8var]!='\0';L_u8var++)
    1e2c:	19 82       	std	Y+1, r1	; 0x01
    1e2e:	0e c0       	rjmp	.+28     	; 0x1e4c <HLCD_vSendStr+0x30>
	{
		HLCD_vSendData(A_u8Ptr[L_u8var]);
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	e2 0f       	add	r30, r18
    1e3e:	f3 1f       	adc	r31, r19
    1e40:	80 81       	ld	r24, Z
    1e42:	0e 94 28 0b 	call	0x1650	; 0x1650 <HLCD_vSendData>

}
void HLCD_vSendStr(u8*A_u8Ptr)
{
	u8 L_u8var;
	for(L_u8var=0;A_u8Ptr[L_u8var]!='\0';L_u8var++)
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	8f 5f       	subi	r24, 0xFF	; 255
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	9b 81       	ldd	r25, Y+3	; 0x03
    1e56:	fc 01       	movw	r30, r24
    1e58:	e2 0f       	add	r30, r18
    1e5a:	f3 1f       	adc	r31, r19
    1e5c:	80 81       	ld	r24, Z
    1e5e:	88 23       	and	r24, r24
    1e60:	39 f7       	brne	.-50     	; 0x1e30 <HLCD_vSendStr+0x14>
		HLCD_vSendData(A_u8Ptr[L_u8var]);

	}


}
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <HLCD_vGoTo>:
void HLCD_vGoTo(u8 A_u8RowIndex,u8 A_u8ColIndex)
{
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <HLCD_vGoTo+0x6>
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	6a 83       	std	Y+2, r22	; 0x02
	if((A_u8RowIndex<2)&&(A_u8ColIndex<16))
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	82 30       	cpi	r24, 0x02	; 2
    1e80:	90 f4       	brcc	.+36     	; 0x1ea6 <HLCD_vGoTo+0x38>
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	80 31       	cpi	r24, 0x10	; 16
    1e86:	78 f4       	brcc	.+30     	; 0x1ea6 <HLCD_vGoTo+0x38>
	{
		if(A_u8RowIndex==LCD_LINE_0)
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	88 23       	and	r24, r24
    1e8c:	29 f4       	brne	.+10     	; 0x1e98 <HLCD_vGoTo+0x2a>
		{
			HLCD_vSendCommand(LCD_ROW_1+A_u8ColIndex);
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	81 58       	subi	r24, 0x81	; 129
    1e92:	0e 94 18 0a 	call	0x1430	; 0x1430 <HLCD_vSendCommand>
    1e96:	07 c0       	rjmp	.+14     	; 0x1ea6 <HLCD_vGoTo+0x38>
		}
		else if(A_u8RowIndex==LCD_LINE_1)
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	81 30       	cpi	r24, 0x01	; 1
    1e9c:	21 f4       	brne	.+8      	; 0x1ea6 <HLCD_vGoTo+0x38>
		{
			HLCD_vSendCommand(LCD_ROW_2+A_u8ColIndex);
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	81 54       	subi	r24, 0x41	; 65
    1ea2:	0e 94 18 0a 	call	0x1430	; 0x1430 <HLCD_vSendCommand>
		}
	}

}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <HLCD_vSendNum>:
void HLCD_vSendNum(s32 A_s32num)
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <HLCD_vSendNum+0x6>
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <HLCD_vSendNum+0x8>
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	69 83       	std	Y+1, r22	; 0x01
    1ebe:	7a 83       	std	Y+2, r23	; 0x02
    1ec0:	8b 83       	std	Y+3, r24	; 0x03
    1ec2:	9c 83       	std	Y+4, r25	; 0x04
	if(A_s32num<0)
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec8:	ab 81       	ldd	r26, Y+3	; 0x03
    1eca:	bc 81       	ldd	r27, Y+4	; 0x04
    1ecc:	bb 23       	and	r27, r27
    1ece:	94 f4       	brge	.+36     	; 0x1ef4 <HLCD_vSendNum+0x44>
	{
		HLCD_vSendData('-');
    1ed0:	8d e2       	ldi	r24, 0x2D	; 45
    1ed2:	0e 94 28 0b 	call	0x1650	; 0x1650 <HLCD_vSendData>
		A_s32num*=-1;
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eda:	ab 81       	ldd	r26, Y+3	; 0x03
    1edc:	bc 81       	ldd	r27, Y+4	; 0x04
    1ede:	b0 95       	com	r27
    1ee0:	a0 95       	com	r26
    1ee2:	90 95       	com	r25
    1ee4:	81 95       	neg	r24
    1ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee8:	af 4f       	sbci	r26, 0xFF	; 255
    1eea:	bf 4f       	sbci	r27, 0xFF	; 255
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	9a 83       	std	Y+2, r25	; 0x02
    1ef0:	ab 83       	std	Y+3, r26	; 0x03
    1ef2:	bc 83       	std	Y+4, r27	; 0x04
	}
	if(A_s32num!=0)
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef8:	ab 81       	ldd	r26, Y+3	; 0x03
    1efa:	bc 81       	ldd	r27, Y+4	; 0x04
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	a1 05       	cpc	r26, r1
    1f00:	b1 05       	cpc	r27, r1
    1f02:	19 f1       	breq	.+70     	; 0x1f4a <HLCD_vSendNum+0x9a>
	{
		HLCD_vSendNum(A_s32num/10);
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	9a 81       	ldd	r25, Y+2	; 0x02
    1f08:	ab 81       	ldd	r26, Y+3	; 0x03
    1f0a:	bc 81       	ldd	r27, Y+4	; 0x04
    1f0c:	2a e0       	ldi	r18, 0x0A	; 10
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e0       	ldi	r20, 0x00	; 0
    1f12:	50 e0       	ldi	r21, 0x00	; 0
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__divmodsi4>
    1f1c:	da 01       	movw	r26, r20
    1f1e:	c9 01       	movw	r24, r18
    1f20:	bc 01       	movw	r22, r24
    1f22:	cd 01       	movw	r24, r26
    1f24:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <HLCD_vSendNum>
		HLCD_vSendData('0'+(A_s32num)%10);
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2c:	ab 81       	ldd	r26, Y+3	; 0x03
    1f2e:	bc 81       	ldd	r27, Y+4	; 0x04
    1f30:	2a e0       	ldi	r18, 0x0A	; 10
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	bc 01       	movw	r22, r24
    1f3a:	cd 01       	movw	r24, r26
    1f3c:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__divmodsi4>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	80 5d       	subi	r24, 0xD0	; 208
    1f46:	0e 94 28 0b 	call	0x1650	; 0x1650 <HLCD_vSendData>

	}
}
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <HLCD_vClear>:
void HLCD_vClear(void)
{
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
	HLCD_vSendCommand(CLR_LCD);
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	0e 94 18 0a 	call	0x1430	; 0x1430 <HLCD_vSendCommand>
}
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <HLCD_vSaveCustomChar>:
void HLCD_vSaveCustomChar(u8 A_u8Index,u8 A_u8CustomChar[])
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <HLCD_vSaveCustomChar+0x6>
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <HLCD_vSaveCustomChar+0x8>
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	8a 83       	std	Y+2, r24	; 0x02
    1f7a:	7c 83       	std	Y+4, r23	; 0x04
    1f7c:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_Counter;
	HLCD_vSendCommand(CGRAM_ADDRESS+A_u8Index*8);
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	88 2f       	mov	r24, r24
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	08 96       	adiw	r24, 0x08	; 8
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	0e 94 18 0a 	call	0x1430	; 0x1430 <HLCD_vSendCommand>
	for(L_Counter=0;L_Counter<8;L_Counter++){
    1f96:	19 82       	std	Y+1, r1	; 0x01
    1f98:	0e c0       	rjmp	.+28     	; 0x1fb6 <HLCD_vSaveCustomChar+0x4a>
		HLCD_vSendData(A_u8CustomChar[L_Counter]);
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	e2 0f       	add	r30, r18
    1fa8:	f3 1f       	adc	r31, r19
    1faa:	80 81       	ld	r24, Z
    1fac:	0e 94 28 0b 	call	0x1650	; 0x1650 <HLCD_vSendData>
}
void HLCD_vSaveCustomChar(u8 A_u8Index,u8 A_u8CustomChar[])
{
	u8 L_Counter;
	HLCD_vSendCommand(CGRAM_ADDRESS+A_u8Index*8);
	for(L_Counter=0;L_Counter<8;L_Counter++){
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	8f 5f       	subi	r24, 0xFF	; 255
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	88 30       	cpi	r24, 0x08	; 8
    1fba:	78 f3       	brcs	.-34     	; 0x1f9a <HLCD_vSaveCustomChar+0x2e>
		HLCD_vSendData(A_u8CustomChar[L_Counter]);
		}

	HLCD_vSendCommand(DDRAM_ADDRESS);
    1fbc:	80 e8       	ldi	r24, 0x80	; 128
    1fbe:	0e 94 18 0a 	call	0x1430	; 0x1430 <HLCD_vSendCommand>

}
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <HLCD_vDisplayCustomChar>:
void HLCD_vDisplayCustomChar(u8 A_u8Cgram_index)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	0f 92       	push	r0
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	89 83       	std	Y+1, r24	; 0x01
	if(A_u8Cgram_index<8){
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	88 30       	cpi	r24, 0x08	; 8
    1fe0:	18 f4       	brcc	.+6      	; 0x1fe8 <HLCD_vDisplayCustomChar+0x18>
		HLCD_vSendData(A_u8Cgram_index);
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	0e 94 28 0b 	call	0x1650	; 0x1650 <HLCD_vSendData>
	}




}
    1fe8:	0f 90       	pop	r0
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <HKPD_vKDOInit>:
#include"../../MCAL/dio/dio_init.h"
#include "KDP_Init.h"
#include<util/delay.h>
#include"KPD.CONFIG.h"
void HKPD_vKDOInit(void)
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPortDir(KEYPAD_PORT,0xF0);
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	60 ef       	ldi	r22, 0xF0	; 240
    1ffc:	0e 94 0d 09 	call	0x121a	; 0x121a <MDIO_vSetPortDir>
	MDIO_vSetPortVal(KEYPAD_PORT,0xFF);
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	6f ef       	ldi	r22, 0xFF	; 255
    2004:	0e 94 51 09 	call	0x12a2	; 0x12a2 <MDIO_vSetPortVal>



}
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <HKPD_GetPressedKey>:
u8 HKPD_GetPressedKey(void)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	a7 97       	sbiw	r28, 0x27	; 39
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
	u8 L_u8Row,L_u8Col,L_u8Val=255,L_u8flag=0;
    2022:	8f ef       	ldi	r24, 0xFF	; 255
    2024:	88 8b       	std	Y+16, r24	; 0x10
    2026:	1f 86       	std	Y+15, r1	; 0x0f
		u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'c','0','=','+'}};
    2028:	ce 01       	movw	r24, r28
    202a:	43 96       	adiw	r24, 0x13	; 19
    202c:	9c a3       	std	Y+36, r25	; 0x24
    202e:	8b a3       	std	Y+35, r24	; 0x23
    2030:	e8 e7       	ldi	r30, 0x78	; 120
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	fe a3       	std	Y+38, r31	; 0x26
    2036:	ed a3       	std	Y+37, r30	; 0x25
    2038:	f0 e1       	ldi	r31, 0x10	; 16
    203a:	ff a3       	std	Y+39, r31	; 0x27
    203c:	ed a1       	ldd	r30, Y+37	; 0x25
    203e:	fe a1       	ldd	r31, Y+38	; 0x26
    2040:	00 80       	ld	r0, Z
    2042:	8d a1       	ldd	r24, Y+37	; 0x25
    2044:	9e a1       	ldd	r25, Y+38	; 0x26
    2046:	01 96       	adiw	r24, 0x01	; 1
    2048:	9e a3       	std	Y+38, r25	; 0x26
    204a:	8d a3       	std	Y+37, r24	; 0x25
    204c:	eb a1       	ldd	r30, Y+35	; 0x23
    204e:	fc a1       	ldd	r31, Y+36	; 0x24
    2050:	00 82       	st	Z, r0
    2052:	8b a1       	ldd	r24, Y+35	; 0x23
    2054:	9c a1       	ldd	r25, Y+36	; 0x24
    2056:	01 96       	adiw	r24, 0x01	; 1
    2058:	9c a3       	std	Y+36, r25	; 0x24
    205a:	8b a3       	std	Y+35, r24	; 0x23
    205c:	9f a1       	ldd	r25, Y+39	; 0x27
    205e:	91 50       	subi	r25, 0x01	; 1
    2060:	9f a3       	std	Y+39, r25	; 0x27
    2062:	ef a1       	ldd	r30, Y+39	; 0x27
    2064:	ee 23       	and	r30, r30
    2066:	51 f7       	brne	.-44     	; 0x203c <HKPD_GetPressedKey+0x2e>
		for (L_u8Col=0;L_u8Col<4;L_u8Col++){
    2068:	19 8a       	std	Y+17, r1	; 0x11
    206a:	bb c0       	rjmp	.+374    	; 0x21e2 <HKPD_GetPressedKey+0x1d4>
			MDIO_vSetBitVal(KEYPAD_PORT,L_u8Col+4,DIO_LOW);
    206c:	89 89       	ldd	r24, Y+17	; 0x11
    206e:	98 2f       	mov	r25, r24
    2070:	9c 5f       	subi	r25, 0xFC	; 252
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	69 2f       	mov	r22, r25
    2076:	40 e0       	ldi	r20, 0x00	; 0
    2078:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MDIO_vSetBitVal>
			for (L_u8Row=0;L_u8Row<4;L_u8Row++){
    207c:	1a 8a       	std	Y+18, r1	; 0x12
    207e:	9f c0       	rjmp	.+318    	; 0x21be <HKPD_GetPressedKey+0x1b0>
				if (MDIO_u8vGetBitVal(KEYPAD_PORT,L_u8Row)==0){
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	6a 89       	ldd	r22, Y+18	; 0x12
    2084:	0e 94 d5 07 	call	0xfaa	; 0xfaa <MDIO_u8vGetBitVal>
    2088:	88 23       	and	r24, r24
    208a:	09 f0       	breq	.+2      	; 0x208e <HKPD_GetPressedKey+0x80>
    208c:	95 c0       	rjmp	.+298    	; 0x21b8 <HKPD_GetPressedKey+0x1aa>
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	a0 ea       	ldi	r26, 0xA0	; 160
    2094:	b1 e4       	ldi	r27, 0x41	; 65
    2096:	8b 87       	std	Y+11, r24	; 0x0b
    2098:	9c 87       	std	Y+12, r25	; 0x0c
    209a:	ad 87       	std	Y+13, r26	; 0x0d
    209c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209e:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	4a e7       	ldi	r20, 0x7A	; 122
    20ac:	53 e4       	ldi	r21, 0x43	; 67
    20ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	8f 83       	std	Y+7, r24	; 0x07
    20b8:	98 87       	std	Y+8, r25	; 0x08
    20ba:	a9 87       	std	Y+9, r26	; 0x09
    20bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20be:	6f 81       	ldd	r22, Y+7	; 0x07
    20c0:	78 85       	ldd	r23, Y+8	; 0x08
    20c2:	89 85       	ldd	r24, Y+9	; 0x09
    20c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	40 e8       	ldi	r20, 0x80	; 128
    20cc:	5f e3       	ldi	r21, 0x3F	; 63
    20ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20d2:	88 23       	and	r24, r24
    20d4:	2c f4       	brge	.+10     	; 0x20e0 <HKPD_GetPressedKey+0xd2>
		__ticks = 1;
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	9e 83       	std	Y+6, r25	; 0x06
    20dc:	8d 83       	std	Y+5, r24	; 0x05
    20de:	3f c0       	rjmp	.+126    	; 0x215e <HKPD_GetPressedKey+0x150>
	else if (__tmp > 65535)
    20e0:	6f 81       	ldd	r22, Y+7	; 0x07
    20e2:	78 85       	ldd	r23, Y+8	; 0x08
    20e4:	89 85       	ldd	r24, Y+9	; 0x09
    20e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	3f ef       	ldi	r19, 0xFF	; 255
    20ec:	4f e7       	ldi	r20, 0x7F	; 127
    20ee:	57 e4       	ldi	r21, 0x47	; 71
    20f0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20f4:	18 16       	cp	r1, r24
    20f6:	4c f5       	brge	.+82     	; 0x214a <HKPD_GetPressedKey+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    20fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e2       	ldi	r20, 0x20	; 32
    2106:	51 e4       	ldi	r21, 0x41	; 65
    2108:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	bc 01       	movw	r22, r24
    2112:	cd 01       	movw	r24, r26
    2114:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	9e 83       	std	Y+6, r25	; 0x06
    211e:	8d 83       	std	Y+5, r24	; 0x05
    2120:	0f c0       	rjmp	.+30     	; 0x2140 <HKPD_GetPressedKey+0x132>
    2122:	89 e1       	ldi	r24, 0x19	; 25
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	9c 83       	std	Y+4, r25	; 0x04
    2128:	8b 83       	std	Y+3, r24	; 0x03
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <HKPD_GetPressedKey+0x120>
    2132:	9c 83       	std	Y+4, r25	; 0x04
    2134:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	9e 83       	std	Y+6, r25	; 0x06
    213e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2140:	8d 81       	ldd	r24, Y+5	; 0x05
    2142:	9e 81       	ldd	r25, Y+6	; 0x06
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	69 f7       	brne	.-38     	; 0x2122 <HKPD_GetPressedKey+0x114>
    2148:	14 c0       	rjmp	.+40     	; 0x2172 <HKPD_GetPressedKey+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214a:	6f 81       	ldd	r22, Y+7	; 0x07
    214c:	78 85       	ldd	r23, Y+8	; 0x08
    214e:	89 85       	ldd	r24, Y+9	; 0x09
    2150:	9a 85       	ldd	r25, Y+10	; 0x0a
    2152:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	9a 83       	std	Y+2, r25	; 0x02
    2164:	89 83       	std	Y+1, r24	; 0x01
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	9a 81       	ldd	r25, Y+2	; 0x02
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <HKPD_GetPressedKey+0x15c>
    216e:	9a 83       	std	Y+2, r25	; 0x02
    2170:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(20);
					if (MDIO_u8vGetBitVal(KEYPAD_PORT,L_u8Row)==0){
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	6a 89       	ldd	r22, Y+18	; 0x12
    2176:	0e 94 d5 07 	call	0xfaa	; 0xfaa <MDIO_u8vGetBitVal>
    217a:	88 23       	and	r24, r24
    217c:	e9 f4       	brne	.+58     	; 0x21b8 <HKPD_GetPressedKey+0x1aa>
						L_u8Val=arr[L_u8Row][L_u8Col];
    217e:	8a 89       	ldd	r24, Y+18	; 0x12
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	89 89       	ldd	r24, Y+17	; 0x11
    2186:	48 2f       	mov	r20, r24
    2188:	50 e0       	ldi	r21, 0x00	; 0
    218a:	22 0f       	add	r18, r18
    218c:	33 1f       	adc	r19, r19
    218e:	22 0f       	add	r18, r18
    2190:	33 1f       	adc	r19, r19
    2192:	ce 01       	movw	r24, r28
    2194:	01 96       	adiw	r24, 0x01	; 1
    2196:	82 0f       	add	r24, r18
    2198:	93 1f       	adc	r25, r19
    219a:	84 0f       	add	r24, r20
    219c:	95 1f       	adc	r25, r21
    219e:	fc 01       	movw	r30, r24
    21a0:	72 96       	adiw	r30, 0x12	; 18
    21a2:	80 81       	ld	r24, Z
    21a4:	88 8b       	std	Y+16, r24	; 0x10
						while (MDIO_u8vGetBitVal(KEYPAD_PORT,L_u8Row)==0);
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	6a 89       	ldd	r22, Y+18	; 0x12
    21aa:	0e 94 d5 07 	call	0xfaa	; 0xfaa <MDIO_u8vGetBitVal>
    21ae:	88 23       	and	r24, r24
    21b0:	d1 f3       	breq	.-12     	; 0x21a6 <HKPD_GetPressedKey+0x198>
						L_u8flag=1;
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	8f 87       	std	Y+15, r24	; 0x0f
    21b6:	07 c0       	rjmp	.+14     	; 0x21c6 <HKPD_GetPressedKey+0x1b8>
{
	u8 L_u8Row,L_u8Col,L_u8Val=255,L_u8flag=0;
		u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'c','0','=','+'}};
		for (L_u8Col=0;L_u8Col<4;L_u8Col++){
			MDIO_vSetBitVal(KEYPAD_PORT,L_u8Col+4,DIO_LOW);
			for (L_u8Row=0;L_u8Row<4;L_u8Row++){
    21b8:	8a 89       	ldd	r24, Y+18	; 0x12
    21ba:	8f 5f       	subi	r24, 0xFF	; 255
    21bc:	8a 8b       	std	Y+18, r24	; 0x12
    21be:	8a 89       	ldd	r24, Y+18	; 0x12
    21c0:	84 30       	cpi	r24, 0x04	; 4
    21c2:	08 f4       	brcc	.+2      	; 0x21c6 <HKPD_GetPressedKey+0x1b8>
    21c4:	5d cf       	rjmp	.-326    	; 0x2080 <HKPD_GetPressedKey+0x72>
						break;
					}

				}
			}
			MDIO_vSetBitVal(KEYPAD_PORT,L_u8Col+4,DIO_HIGH);
    21c6:	89 89       	ldd	r24, Y+17	; 0x11
    21c8:	98 2f       	mov	r25, r24
    21ca:	9c 5f       	subi	r25, 0xFC	; 252
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	69 2f       	mov	r22, r25
    21d0:	41 e0       	ldi	r20, 0x01	; 1
    21d2:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MDIO_vSetBitVal>
			if (L_u8flag==1)
    21d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d8:	81 30       	cpi	r24, 0x01	; 1
    21da:	39 f0       	breq	.+14     	; 0x21ea <HKPD_GetPressedKey+0x1dc>
}
u8 HKPD_GetPressedKey(void)
{
	u8 L_u8Row,L_u8Col,L_u8Val=255,L_u8flag=0;
		u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'c','0','=','+'}};
		for (L_u8Col=0;L_u8Col<4;L_u8Col++){
    21dc:	89 89       	ldd	r24, Y+17	; 0x11
    21de:	8f 5f       	subi	r24, 0xFF	; 255
    21e0:	89 8b       	std	Y+17, r24	; 0x11
    21e2:	89 89       	ldd	r24, Y+17	; 0x11
    21e4:	84 30       	cpi	r24, 0x04	; 4
    21e6:	08 f4       	brcc	.+2      	; 0x21ea <HKPD_GetPressedKey+0x1dc>
    21e8:	41 cf       	rjmp	.-382    	; 0x206c <HKPD_GetPressedKey+0x5e>
			}
			MDIO_vSetBitVal(KEYPAD_PORT,L_u8Col+4,DIO_HIGH);
			if (L_u8flag==1)
				break;
		}
		return L_u8Val;
    21ea:	88 89       	ldd	r24, Y+16	; 0x10

}
    21ec:	a7 96       	adiw	r28, 0x27	; 39
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	de bf       	out	0x3e, r29	; 62
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <HCALC_vCalculate>:
#include "../../MCAL/dio/dio_init.h"
#include "../../HALL/LCD/LCD_init.h"
#include"../../HALL/KDP/KDP_Init.h"
#include"util/delay.h"
#include"CALC_init.h"
void HCALC_vCalculate(void){
    21fe:	ef 92       	push	r14
    2200:	ff 92       	push	r15
    2202:	0f 93       	push	r16
    2204:	1f 93       	push	r17
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	c8 56       	subi	r28, 0x68	; 104
    2210:	d0 40       	sbci	r29, 0x00	; 0
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61


	HLCD_vLCDInit();
    221c:	0e 94 38 0c 	call	0x1870	; 0x1870 <HLCD_vLCDInit>
		u8 maxelem=0;
    2220:	1e aa       	std	Y+54, r1	; 0x36
		u8 arr[50];
	    u8 elem;
	    u8 op=1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	8c ab       	std	Y+52, r24	; 0x34


		while(1)
		{
			while(1){
			HKPD_vKDOInit();
    2226:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <HKPD_vKDOInit>
			 elem=HKPD_GetPressedKey();
    222a:	0e 94 07 10 	call	0x200e	; 0x200e <HKPD_GetPressedKey>
    222e:	8d ab       	std	Y+53, r24	; 0x35
			if(elem==255)
    2230:	8d a9       	ldd	r24, Y+53	; 0x35
    2232:	8f 3f       	cpi	r24, 0xFF	; 255
    2234:	c1 f3       	breq	.-16     	; 0x2226 <HCALC_vCalculate+0x28>
				continue;
			arr[maxelem++]=elem;
    2236:	8e a9       	ldd	r24, Y+54	; 0x36
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	ce 01       	movw	r24, r28
    223e:	c7 96       	adiw	r24, 0x37	; 55
    2240:	fc 01       	movw	r30, r24
    2242:	e2 0f       	add	r30, r18
    2244:	f3 1f       	adc	r31, r19
    2246:	8d a9       	ldd	r24, Y+53	; 0x35
    2248:	80 83       	st	Z, r24
    224a:	8e a9       	ldd	r24, Y+54	; 0x36
    224c:	8f 5f       	subi	r24, 0xFF	; 255
    224e:	8e ab       	std	Y+54, r24	; 0x36
			HLCD_vSendData(elem);
    2250:	8d a9       	ldd	r24, Y+53	; 0x35
    2252:	0e 94 28 0b 	call	0x1650	; 0x1650 <HLCD_vSendData>
	          if(elem=='=')
    2256:	8d a9       	ldd	r24, Y+53	; 0x35
    2258:	8d 33       	cpi	r24, 0x3D	; 61
    225a:	29 f7       	brne	.-54     	; 0x2226 <HCALC_vCalculate+0x28>
	          {arr[maxelem++]=elem;
    225c:	8e a9       	ldd	r24, Y+54	; 0x36
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	ce 01       	movw	r24, r28
    2264:	c7 96       	adiw	r24, 0x37	; 55
    2266:	fc 01       	movw	r30, r24
    2268:	e2 0f       	add	r30, r18
    226a:	f3 1f       	adc	r31, r19
    226c:	8d a9       	ldd	r24, Y+53	; 0x35
    226e:	80 83       	st	Z, r24
    2270:	8e a9       	ldd	r24, Y+54	; 0x36
    2272:	8f 5f       	subi	r24, 0xFF	; 255
    2274:	8e ab       	std	Y+54, r24	; 0x36
	        	  break;
	          }
			}

			for(int x=1;x<=maxelem;x++)
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	9b ab       	std	Y+51, r25	; 0x33
    227c:	8a ab       	std	Y+50, r24	; 0x32
    227e:	30 c0       	rjmp	.+96     	; 0x22e0 <HCALC_vCalculate+0xe2>
			{
				if(arr[x]=='-'||arr[x]=='+'||arr[x]=='*'||arr[x]=='/')
    2280:	2a a9       	ldd	r18, Y+50	; 0x32
    2282:	3b a9       	ldd	r19, Y+51	; 0x33
    2284:	ce 01       	movw	r24, r28
    2286:	c7 96       	adiw	r24, 0x37	; 55
    2288:	fc 01       	movw	r30, r24
    228a:	e2 0f       	add	r30, r18
    228c:	f3 1f       	adc	r31, r19
    228e:	80 81       	ld	r24, Z
    2290:	8d 32       	cpi	r24, 0x2D	; 45
    2292:	71 f1       	breq	.+92     	; 0x22f0 <HCALC_vCalculate+0xf2>
    2294:	2a a9       	ldd	r18, Y+50	; 0x32
    2296:	3b a9       	ldd	r19, Y+51	; 0x33
    2298:	ce 01       	movw	r24, r28
    229a:	c7 96       	adiw	r24, 0x37	; 55
    229c:	fc 01       	movw	r30, r24
    229e:	e2 0f       	add	r30, r18
    22a0:	f3 1f       	adc	r31, r19
    22a2:	80 81       	ld	r24, Z
    22a4:	8b 32       	cpi	r24, 0x2B	; 43
    22a6:	21 f1       	breq	.+72     	; 0x22f0 <HCALC_vCalculate+0xf2>
    22a8:	2a a9       	ldd	r18, Y+50	; 0x32
    22aa:	3b a9       	ldd	r19, Y+51	; 0x33
    22ac:	ce 01       	movw	r24, r28
    22ae:	c7 96       	adiw	r24, 0x37	; 55
    22b0:	fc 01       	movw	r30, r24
    22b2:	e2 0f       	add	r30, r18
    22b4:	f3 1f       	adc	r31, r19
    22b6:	80 81       	ld	r24, Z
    22b8:	8a 32       	cpi	r24, 0x2A	; 42
    22ba:	d1 f0       	breq	.+52     	; 0x22f0 <HCALC_vCalculate+0xf2>
    22bc:	2a a9       	ldd	r18, Y+50	; 0x32
    22be:	3b a9       	ldd	r19, Y+51	; 0x33
    22c0:	ce 01       	movw	r24, r28
    22c2:	c7 96       	adiw	r24, 0x37	; 55
    22c4:	fc 01       	movw	r30, r24
    22c6:	e2 0f       	add	r30, r18
    22c8:	f3 1f       	adc	r31, r19
    22ca:	80 81       	ld	r24, Z
    22cc:	8f 32       	cpi	r24, 0x2F	; 47
    22ce:	81 f0       	breq	.+32     	; 0x22f0 <HCALC_vCalculate+0xf2>
	               break;
	            op++;
    22d0:	8c a9       	ldd	r24, Y+52	; 0x34
    22d2:	8f 5f       	subi	r24, 0xFF	; 255
    22d4:	8c ab       	std	Y+52, r24	; 0x34
	          {arr[maxelem++]=elem;
	        	  break;
	          }
			}

			for(int x=1;x<=maxelem;x++)
    22d6:	8a a9       	ldd	r24, Y+50	; 0x32
    22d8:	9b a9       	ldd	r25, Y+51	; 0x33
    22da:	01 96       	adiw	r24, 0x01	; 1
    22dc:	9b ab       	std	Y+51, r25	; 0x33
    22de:	8a ab       	std	Y+50, r24	; 0x32
    22e0:	8e a9       	ldd	r24, Y+54	; 0x36
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	8a a9       	ldd	r24, Y+50	; 0x32
    22e8:	9b a9       	ldd	r25, Y+51	; 0x33
    22ea:	28 17       	cp	r18, r24
    22ec:	39 07       	cpc	r19, r25
    22ee:	44 f6       	brge	.-112    	; 0x2280 <HCALC_vCalculate+0x82>
	            op++;

			}


	           if(arr[op]=='+')
    22f0:	8c a9       	ldd	r24, Y+52	; 0x34
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	ce 01       	movw	r24, r28
    22f8:	c7 96       	adiw	r24, 0x37	; 55
    22fa:	fc 01       	movw	r30, r24
    22fc:	e2 0f       	add	r30, r18
    22fe:	f3 1f       	adc	r31, r19
    2300:	80 81       	ld	r24, Z
    2302:	8b 32       	cpi	r24, 0x2B	; 43
    2304:	71 f5       	brne	.+92     	; 0x2362 <HCALC_vCalculate+0x164>
	           {
        	   s32 num1=dig1(arr,op);
    2306:	ce 01       	movw	r24, r28
    2308:	c7 96       	adiw	r24, 0x37	; 55
    230a:	6c a9       	ldd	r22, Y+52	; 0x34
    230c:	0e 94 84 12 	call	0x2508	; 0x2508 <dig1>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	8e a7       	std	Y+46, r24	; 0x2e
    2316:	9f a7       	std	Y+47, r25	; 0x2f
    2318:	a8 ab       	std	Y+48, r26	; 0x30
    231a:	b9 ab       	std	Y+49, r27	; 0x31
	        	  s32 num2=dig2(arr,op);
    231c:	ce 01       	movw	r24, r28
    231e:	c7 96       	adiw	r24, 0x37	; 55
    2320:	6c a9       	ldd	r22, Y+52	; 0x34
    2322:	0e 94 72 13 	call	0x26e4	; 0x26e4 <dig2>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	8a a7       	std	Y+42, r24	; 0x2a
    232c:	9b a7       	std	Y+43, r25	; 0x2b
    232e:	ac a7       	std	Y+44, r26	; 0x2c
    2330:	bd a7       	std	Y+45, r27	; 0x2d
			 s32 num3=num1+num2;
    2332:	2e a5       	ldd	r18, Y+46	; 0x2e
    2334:	3f a5       	ldd	r19, Y+47	; 0x2f
    2336:	48 a9       	ldd	r20, Y+48	; 0x30
    2338:	59 a9       	ldd	r21, Y+49	; 0x31
    233a:	8a a5       	ldd	r24, Y+42	; 0x2a
    233c:	9b a5       	ldd	r25, Y+43	; 0x2b
    233e:	ac a5       	ldd	r26, Y+44	; 0x2c
    2340:	bd a5       	ldd	r27, Y+45	; 0x2d
    2342:	82 0f       	add	r24, r18
    2344:	93 1f       	adc	r25, r19
    2346:	a4 1f       	adc	r26, r20
    2348:	b5 1f       	adc	r27, r21
    234a:	8e a3       	std	Y+38, r24	; 0x26
    234c:	9f a3       	std	Y+39, r25	; 0x27
    234e:	a8 a7       	std	Y+40, r26	; 0x28
    2350:	b9 a7       	std	Y+41, r27	; 0x29
			 HLCD_vSendNum(num3);
    2352:	8e a1       	ldd	r24, Y+38	; 0x26
    2354:	9f a1       	ldd	r25, Y+39	; 0x27
    2356:	a8 a5       	ldd	r26, Y+40	; 0x28
    2358:	b9 a5       	ldd	r27, Y+41	; 0x29
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <HLCD_vSendNum>
	           }



	           if(arr[op]=='*')
    2362:	8c a9       	ldd	r24, Y+52	; 0x34
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	ce 01       	movw	r24, r28
    236a:	c7 96       	adiw	r24, 0x37	; 55
    236c:	fc 01       	movw	r30, r24
    236e:	e2 0f       	add	r30, r18
    2370:	f3 1f       	adc	r31, r19
    2372:	80 81       	ld	r24, Z
    2374:	8a 32       	cpi	r24, 0x2A	; 42
    2376:	81 f5       	brne	.+96     	; 0x23d8 <HCALC_vCalculate+0x1da>
	                      {
	        	         s32 num1=dig1(arr,op);
    2378:	ce 01       	movw	r24, r28
    237a:	c7 96       	adiw	r24, 0x37	; 55
    237c:	6c a9       	ldd	r22, Y+52	; 0x34
    237e:	0e 94 84 12 	call	0x2508	; 0x2508 <dig1>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	8a a3       	std	Y+34, r24	; 0x22
    2388:	9b a3       	std	Y+35, r25	; 0x23
    238a:	ac a3       	std	Y+36, r26	; 0x24
    238c:	bd a3       	std	Y+37, r27	; 0x25
	        	   		 s32 num2=dig2(arr,op);
    238e:	ce 01       	movw	r24, r28
    2390:	c7 96       	adiw	r24, 0x37	; 55
    2392:	6c a9       	ldd	r22, Y+52	; 0x34
    2394:	0e 94 72 13 	call	0x26e4	; 0x26e4 <dig2>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	8e 8f       	std	Y+30, r24	; 0x1e
    239e:	9f 8f       	std	Y+31, r25	; 0x1f
    23a0:	a8 a3       	std	Y+32, r26	; 0x20
    23a2:	b9 a3       	std	Y+33, r27	; 0x21
	        	   		 s32 num3=num1*num2;
    23a4:	8a a1       	ldd	r24, Y+34	; 0x22
    23a6:	9b a1       	ldd	r25, Y+35	; 0x23
    23a8:	ac a1       	ldd	r26, Y+36	; 0x24
    23aa:	bd a1       	ldd	r27, Y+37	; 0x25
    23ac:	2e 8d       	ldd	r18, Y+30	; 0x1e
    23ae:	3f 8d       	ldd	r19, Y+31	; 0x1f
    23b0:	48 a1       	ldd	r20, Y+32	; 0x20
    23b2:	59 a1       	ldd	r21, Y+33	; 0x21
    23b4:	bc 01       	movw	r22, r24
    23b6:	cd 01       	movw	r24, r26
    23b8:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__mulsi3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	8a 8f       	std	Y+26, r24	; 0x1a
    23c2:	9b 8f       	std	Y+27, r25	; 0x1b
    23c4:	ac 8f       	std	Y+28, r26	; 0x1c
    23c6:	bd 8f       	std	Y+29, r27	; 0x1d
	        	   		 HLCD_vSendNum(num3);
    23c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23cc:	ac 8d       	ldd	r26, Y+28	; 0x1c
    23ce:	bd 8d       	ldd	r27, Y+29	; 0x1d
    23d0:	bc 01       	movw	r22, r24
    23d2:	cd 01       	movw	r24, r26
    23d4:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <HLCD_vSendNum>
	                      }
	           if(arr[op]=='/')
    23d8:	8c a9       	ldd	r24, Y+52	; 0x34
    23da:	28 2f       	mov	r18, r24
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	ce 01       	movw	r24, r28
    23e0:	c7 96       	adiw	r24, 0x37	; 55
    23e2:	fc 01       	movw	r30, r24
    23e4:	e2 0f       	add	r30, r18
    23e6:	f3 1f       	adc	r31, r19
    23e8:	80 81       	ld	r24, Z
    23ea:	8f 32       	cpi	r24, 0x2F	; 47
    23ec:	e9 f5       	brne	.+122    	; 0x2468 <HCALC_vCalculate+0x26a>
	                      {
	        	   s32 num1=dig1(arr,op);
    23ee:	ce 01       	movw	r24, r28
    23f0:	c7 96       	adiw	r24, 0x37	; 55
    23f2:	6c a9       	ldd	r22, Y+52	; 0x34
    23f4:	0e 94 84 12 	call	0x2508	; 0x2508 <dig1>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	8e 8b       	std	Y+22, r24	; 0x16
    23fe:	9f 8b       	std	Y+23, r25	; 0x17
    2400:	a8 8f       	std	Y+24, r26	; 0x18
    2402:	b9 8f       	std	Y+25, r27	; 0x19
	        	           	   		 s32 num2=dig2(arr,op);
    2404:	ce 01       	movw	r24, r28
    2406:	c7 96       	adiw	r24, 0x37	; 55
    2408:	6c a9       	ldd	r22, Y+52	; 0x34
    240a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <dig2>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	8a 8b       	std	Y+18, r24	; 0x12
    2414:	9b 8b       	std	Y+19, r25	; 0x13
    2416:	ac 8b       	std	Y+20, r26	; 0x14
    2418:	bd 8b       	std	Y+21, r27	; 0x15
	        	           	   		 if(num2==0)
    241a:	8a 89       	ldd	r24, Y+18	; 0x12
    241c:	9b 89       	ldd	r25, Y+19	; 0x13
    241e:	ac 89       	ldd	r26, Y+20	; 0x14
    2420:	bd 89       	ldd	r27, Y+21	; 0x15
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	a1 05       	cpc	r26, r1
    2426:	b1 05       	cpc	r27, r1
    2428:	29 f4       	brne	.+10     	; 0x2434 <HCALC_vCalculate+0x236>
	        	           	   			 HLCD_vSendStr("error");
    242a:	80 e6       	ldi	r24, 0x60	; 96
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <HLCD_vSendStr>
    2432:	1a c0       	rjmp	.+52     	; 0x2468 <HCALC_vCalculate+0x26a>
	        	           	   		 else{
	        	   		 s32 num3=num1/num2;
    2434:	8e 89       	ldd	r24, Y+22	; 0x16
    2436:	9f 89       	ldd	r25, Y+23	; 0x17
    2438:	a8 8d       	ldd	r26, Y+24	; 0x18
    243a:	b9 8d       	ldd	r27, Y+25	; 0x19
    243c:	2a 89       	ldd	r18, Y+18	; 0x12
    243e:	3b 89       	ldd	r19, Y+19	; 0x13
    2440:	4c 89       	ldd	r20, Y+20	; 0x14
    2442:	5d 89       	ldd	r21, Y+21	; 0x15
    2444:	bc 01       	movw	r22, r24
    2446:	cd 01       	movw	r24, r26
    2448:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__divmodsi4>
    244c:	da 01       	movw	r26, r20
    244e:	c9 01       	movw	r24, r18
    2450:	8e 87       	std	Y+14, r24	; 0x0e
    2452:	9f 87       	std	Y+15, r25	; 0x0f
    2454:	a8 8b       	std	Y+16, r26	; 0x10
    2456:	b9 8b       	std	Y+17, r27	; 0x11
	        	   		 HLCD_vSendNum(num3);}
    2458:	8e 85       	ldd	r24, Y+14	; 0x0e
    245a:	9f 85       	ldd	r25, Y+15	; 0x0f
    245c:	a8 89       	ldd	r26, Y+16	; 0x10
    245e:	b9 89       	ldd	r27, Y+17	; 0x11
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <HLCD_vSendNum>
	           		            }
	           if(arr[op]=='-')
    2468:	8c a9       	ldd	r24, Y+52	; 0x34
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	ce 01       	movw	r24, r28
    2470:	c7 96       	adiw	r24, 0x37	; 55
    2472:	fc 01       	movw	r30, r24
    2474:	e2 0f       	add	r30, r18
    2476:	f3 1f       	adc	r31, r19
    2478:	80 81       	ld	r24, Z
    247a:	8d 32       	cpi	r24, 0x2D	; 45
    247c:	91 f5       	brne	.+100    	; 0x24e2 <HCALC_vCalculate+0x2e4>
	                                {
	        	   s32 num1=dig1(arr,op);
    247e:	ce 01       	movw	r24, r28
    2480:	c7 96       	adiw	r24, 0x37	; 55
    2482:	6c a9       	ldd	r22, Y+52	; 0x34
    2484:	0e 94 84 12 	call	0x2508	; 0x2508 <dig1>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	8a 87       	std	Y+10, r24	; 0x0a
    248e:	9b 87       	std	Y+11, r25	; 0x0b
    2490:	ac 87       	std	Y+12, r26	; 0x0c
    2492:	bd 87       	std	Y+13, r27	; 0x0d
	        	           	   		 s32 num2=dig2(arr,op);
    2494:	ce 01       	movw	r24, r28
    2496:	c7 96       	adiw	r24, 0x37	; 55
    2498:	6c a9       	ldd	r22, Y+52	; 0x34
    249a:	0e 94 72 13 	call	0x26e4	; 0x26e4 <dig2>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	8e 83       	std	Y+6, r24	; 0x06
    24a4:	9f 83       	std	Y+7, r25	; 0x07
    24a6:	a8 87       	std	Y+8, r26	; 0x08
    24a8:	b9 87       	std	Y+9, r27	; 0x09
	        	   		 s32 num3=num1-num2;
    24aa:	2a 85       	ldd	r18, Y+10	; 0x0a
    24ac:	3b 85       	ldd	r19, Y+11	; 0x0b
    24ae:	4c 85       	ldd	r20, Y+12	; 0x0c
    24b0:	5d 85       	ldd	r21, Y+13	; 0x0d
    24b2:	8e 81       	ldd	r24, Y+6	; 0x06
    24b4:	9f 81       	ldd	r25, Y+7	; 0x07
    24b6:	a8 85       	ldd	r26, Y+8	; 0x08
    24b8:	b9 85       	ldd	r27, Y+9	; 0x09
    24ba:	79 01       	movw	r14, r18
    24bc:	8a 01       	movw	r16, r20
    24be:	e8 1a       	sub	r14, r24
    24c0:	f9 0a       	sbc	r15, r25
    24c2:	0a 0b       	sbc	r16, r26
    24c4:	1b 0b       	sbc	r17, r27
    24c6:	d8 01       	movw	r26, r16
    24c8:	c7 01       	movw	r24, r14
    24ca:	8a 83       	std	Y+2, r24	; 0x02
    24cc:	9b 83       	std	Y+3, r25	; 0x03
    24ce:	ac 83       	std	Y+4, r26	; 0x04
    24d0:	bd 83       	std	Y+5, r27	; 0x05
	        	   		 HLCD_vSendNum(num3);
    24d2:	8a 81       	ldd	r24, Y+2	; 0x02
    24d4:	9b 81       	ldd	r25, Y+3	; 0x03
    24d6:	ac 81       	ldd	r26, Y+4	; 0x04
    24d8:	bd 81       	ldd	r27, Y+5	; 0x05
    24da:	bc 01       	movw	r22, r24
    24dc:	cd 01       	movw	r24, r26
    24de:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <HLCD_vSendNum>
	                     		            }

	          while(1)
	          {HKPD_vKDOInit();
    24e2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <HKPD_vKDOInit>
	        	  u8 ke=HKPD_GetPressedKey();
    24e6:	0e 94 07 10 	call	0x200e	; 0x200e <HKPD_GetPressedKey>
    24ea:	89 83       	std	Y+1, r24	; 0x01
	        	  if(ke==255)
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	8f 3f       	cpi	r24, 0xFF	; 255
    24f0:	c1 f3       	breq	.-16     	; 0x24e2 <HCALC_vCalculate+0x2e4>
	        	  			continue;
	                if(ke=='c')
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	83 36       	cpi	r24, 0x63	; 99
    24f6:	a9 f7       	brne	.-22     	; 0x24e2 <HCALC_vCalculate+0x2e4>
	                {
	                  HLCD_vClear();
    24f8:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <HLCD_vClear>
	                  maxelem=0;
    24fc:	1e aa       	std	Y+54, r1	; 0x36
	                  //arr[0]='\0';
	                  elem=255;
    24fe:	8f ef       	ldi	r24, 0xFF	; 255
    2500:	8d ab       	std	Y+53, r24	; 0x35
	                  op=1;
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	8c ab       	std	Y+52, r24	; 0x34
    2506:	8f ce       	rjmp	.-738    	; 0x2226 <HCALC_vCalculate+0x28>

00002508 <dig1>:
	     }
	  }
	}
}
s32 dig1(u8 arr[],u8 j)
{
    2508:	df 93       	push	r29
    250a:	cf 93       	push	r28
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	2f 97       	sbiw	r28, 0x0f	; 15
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	de bf       	out	0x3e, r29	; 62
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	cd bf       	out	0x3d, r28	; 61
    251c:	9a 87       	std	Y+10, r25	; 0x0a
    251e:	89 87       	std	Y+9, r24	; 0x09
    2520:	6b 87       	std	Y+11, r22	; 0x0b
	s32 num1=0;
    2522:	1d 82       	std	Y+5, r1	; 0x05
    2524:	1e 82       	std	Y+6, r1	; 0x06
    2526:	1f 82       	std	Y+7, r1	; 0x07
    2528:	18 86       	std	Y+8, r1	; 0x08

	if(arr[0]=='-')
    252a:	e9 85       	ldd	r30, Y+9	; 0x09
    252c:	fa 85       	ldd	r31, Y+10	; 0x0a
    252e:	80 81       	ld	r24, Z
    2530:	8d 32       	cpi	r24, 0x2D	; 45
    2532:	09 f0       	breq	.+2      	; 0x2536 <dig1+0x2e>
    2534:	69 c0       	rjmp	.+210    	; 0x2608 <dig1+0x100>
	{ num1=num1+(arr[1]-'0');
    2536:	89 85       	ldd	r24, Y+9	; 0x09
    2538:	9a 85       	ldd	r25, Y+10	; 0x0a
    253a:	fc 01       	movw	r30, r24
    253c:	31 96       	adiw	r30, 0x01	; 1
    253e:	80 81       	ld	r24, Z
    2540:	88 2f       	mov	r24, r24
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	c0 97       	sbiw	r24, 0x30	; 48
    2546:	9c 01       	movw	r18, r24
    2548:	44 27       	eor	r20, r20
    254a:	37 fd       	sbrc	r19, 7
    254c:	40 95       	com	r20
    254e:	54 2f       	mov	r21, r20
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	af 81       	ldd	r26, Y+7	; 0x07
    2556:	b8 85       	ldd	r27, Y+8	; 0x08
    2558:	82 0f       	add	r24, r18
    255a:	93 1f       	adc	r25, r19
    255c:	a4 1f       	adc	r26, r20
    255e:	b5 1f       	adc	r27, r21
    2560:	8d 83       	std	Y+5, r24	; 0x05
    2562:	9e 83       	std	Y+6, r25	; 0x06
    2564:	af 83       	std	Y+7, r26	; 0x07
    2566:	b8 87       	std	Y+8, r27	; 0x08
		for(int i=2;i<j;i++){
    2568:	82 e0       	ldi	r24, 0x02	; 2
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	9c 83       	std	Y+4, r25	; 0x04
    256e:	8b 83       	std	Y+3, r24	; 0x03
    2570:	33 c0       	rjmp	.+102    	; 0x25d8 <dig1+0xd0>
			 num1=num1*10;
    2572:	8d 81       	ldd	r24, Y+5	; 0x05
    2574:	9e 81       	ldd	r25, Y+6	; 0x06
    2576:	af 81       	ldd	r26, Y+7	; 0x07
    2578:	b8 85       	ldd	r27, Y+8	; 0x08
    257a:	2a e0       	ldi	r18, 0x0A	; 10
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e0       	ldi	r20, 0x00	; 0
    2580:	50 e0       	ldi	r21, 0x00	; 0
    2582:	bc 01       	movw	r22, r24
    2584:	cd 01       	movw	r24, r26
    2586:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__mulsi3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	8d 83       	std	Y+5, r24	; 0x05
    2590:	9e 83       	std	Y+6, r25	; 0x06
    2592:	af 83       	std	Y+7, r26	; 0x07
    2594:	b8 87       	std	Y+8, r27	; 0x08
		 num1=num1+(arr[i]-'0');
    2596:	2b 81       	ldd	r18, Y+3	; 0x03
    2598:	3c 81       	ldd	r19, Y+4	; 0x04
    259a:	89 85       	ldd	r24, Y+9	; 0x09
    259c:	9a 85       	ldd	r25, Y+10	; 0x0a
    259e:	fc 01       	movw	r30, r24
    25a0:	e2 0f       	add	r30, r18
    25a2:	f3 1f       	adc	r31, r19
    25a4:	80 81       	ld	r24, Z
    25a6:	88 2f       	mov	r24, r24
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	c0 97       	sbiw	r24, 0x30	; 48
    25ac:	9c 01       	movw	r18, r24
    25ae:	44 27       	eor	r20, r20
    25b0:	37 fd       	sbrc	r19, 7
    25b2:	40 95       	com	r20
    25b4:	54 2f       	mov	r21, r20
    25b6:	8d 81       	ldd	r24, Y+5	; 0x05
    25b8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ba:	af 81       	ldd	r26, Y+7	; 0x07
    25bc:	b8 85       	ldd	r27, Y+8	; 0x08
    25be:	82 0f       	add	r24, r18
    25c0:	93 1f       	adc	r25, r19
    25c2:	a4 1f       	adc	r26, r20
    25c4:	b5 1f       	adc	r27, r21
    25c6:	8d 83       	std	Y+5, r24	; 0x05
    25c8:	9e 83       	std	Y+6, r25	; 0x06
    25ca:	af 83       	std	Y+7, r26	; 0x07
    25cc:	b8 87       	std	Y+8, r27	; 0x08
{
	s32 num1=0;

	if(arr[0]=='-')
	{ num1=num1+(arr[1]-'0');
		for(int i=2;i<j;i++){
    25ce:	8b 81       	ldd	r24, Y+3	; 0x03
    25d0:	9c 81       	ldd	r25, Y+4	; 0x04
    25d2:	01 96       	adiw	r24, 0x01	; 1
    25d4:	9c 83       	std	Y+4, r25	; 0x04
    25d6:	8b 83       	std	Y+3, r24	; 0x03
    25d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    25da:	28 2f       	mov	r18, r24
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
    25e0:	9c 81       	ldd	r25, Y+4	; 0x04
    25e2:	82 17       	cp	r24, r18
    25e4:	93 07       	cpc	r25, r19
    25e6:	2c f2       	brlt	.-118    	; 0x2572 <dig1+0x6a>
			 num1=num1*10;
		 num1=num1+(arr[i]-'0');

		}
		return -num1;
    25e8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ea:	9e 81       	ldd	r25, Y+6	; 0x06
    25ec:	af 81       	ldd	r26, Y+7	; 0x07
    25ee:	b8 85       	ldd	r27, Y+8	; 0x08
    25f0:	22 27       	eor	r18, r18
    25f2:	33 27       	eor	r19, r19
    25f4:	a9 01       	movw	r20, r18
    25f6:	28 1b       	sub	r18, r24
    25f8:	39 0b       	sbc	r19, r25
    25fa:	4a 0b       	sbc	r20, r26
    25fc:	5b 0b       	sbc	r21, r27
    25fe:	2c 87       	std	Y+12, r18	; 0x0c
    2600:	3d 87       	std	Y+13, r19	; 0x0d
    2602:	4e 87       	std	Y+14, r20	; 0x0e
    2604:	5f 87       	std	Y+15, r21	; 0x0f
    2606:	5f c0       	rjmp	.+190    	; 0x26c6 <dig1+0x1be>
	}

		else
		{num1=num1+(arr[0]-'0');
    2608:	e9 85       	ldd	r30, Y+9	; 0x09
    260a:	fa 85       	ldd	r31, Y+10	; 0x0a
    260c:	80 81       	ld	r24, Z
    260e:	88 2f       	mov	r24, r24
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	c0 97       	sbiw	r24, 0x30	; 48
    2614:	9c 01       	movw	r18, r24
    2616:	44 27       	eor	r20, r20
    2618:	37 fd       	sbrc	r19, 7
    261a:	40 95       	com	r20
    261c:	54 2f       	mov	r21, r20
    261e:	8d 81       	ldd	r24, Y+5	; 0x05
    2620:	9e 81       	ldd	r25, Y+6	; 0x06
    2622:	af 81       	ldd	r26, Y+7	; 0x07
    2624:	b8 85       	ldd	r27, Y+8	; 0x08
    2626:	82 0f       	add	r24, r18
    2628:	93 1f       	adc	r25, r19
    262a:	a4 1f       	adc	r26, r20
    262c:	b5 1f       	adc	r27, r21
    262e:	8d 83       	std	Y+5, r24	; 0x05
    2630:	9e 83       	std	Y+6, r25	; 0x06
    2632:	af 83       	std	Y+7, r26	; 0x07
    2634:	b8 87       	std	Y+8, r27	; 0x08
		for(int i=1;i<j;i++){
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	9a 83       	std	Y+2, r25	; 0x02
    263c:	89 83       	std	Y+1, r24	; 0x01
    263e:	33 c0       	rjmp	.+102    	; 0x26a6 <dig1+0x19e>
			 num1=num1*10;
    2640:	8d 81       	ldd	r24, Y+5	; 0x05
    2642:	9e 81       	ldd	r25, Y+6	; 0x06
    2644:	af 81       	ldd	r26, Y+7	; 0x07
    2646:	b8 85       	ldd	r27, Y+8	; 0x08
    2648:	2a e0       	ldi	r18, 0x0A	; 10
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e0       	ldi	r20, 0x00	; 0
    264e:	50 e0       	ldi	r21, 0x00	; 0
    2650:	bc 01       	movw	r22, r24
    2652:	cd 01       	movw	r24, r26
    2654:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__mulsi3>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	8d 83       	std	Y+5, r24	; 0x05
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	af 83       	std	Y+7, r26	; 0x07
    2662:	b8 87       	std	Y+8, r27	; 0x08
		 num1=num1+(arr[i]-'0');
    2664:	29 81       	ldd	r18, Y+1	; 0x01
    2666:	3a 81       	ldd	r19, Y+2	; 0x02
    2668:	89 85       	ldd	r24, Y+9	; 0x09
    266a:	9a 85       	ldd	r25, Y+10	; 0x0a
    266c:	fc 01       	movw	r30, r24
    266e:	e2 0f       	add	r30, r18
    2670:	f3 1f       	adc	r31, r19
    2672:	80 81       	ld	r24, Z
    2674:	88 2f       	mov	r24, r24
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	c0 97       	sbiw	r24, 0x30	; 48
    267a:	9c 01       	movw	r18, r24
    267c:	44 27       	eor	r20, r20
    267e:	37 fd       	sbrc	r19, 7
    2680:	40 95       	com	r20
    2682:	54 2f       	mov	r21, r20
    2684:	8d 81       	ldd	r24, Y+5	; 0x05
    2686:	9e 81       	ldd	r25, Y+6	; 0x06
    2688:	af 81       	ldd	r26, Y+7	; 0x07
    268a:	b8 85       	ldd	r27, Y+8	; 0x08
    268c:	82 0f       	add	r24, r18
    268e:	93 1f       	adc	r25, r19
    2690:	a4 1f       	adc	r26, r20
    2692:	b5 1f       	adc	r27, r21
    2694:	8d 83       	std	Y+5, r24	; 0x05
    2696:	9e 83       	std	Y+6, r25	; 0x06
    2698:	af 83       	std	Y+7, r26	; 0x07
    269a:	b8 87       	std	Y+8, r27	; 0x08
		return -num1;
	}

		else
		{num1=num1+(arr[0]-'0');
		for(int i=1;i<j;i++){
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	9a 81       	ldd	r25, Y+2	; 0x02
    26a0:	01 96       	adiw	r24, 0x01	; 1
    26a2:	9a 83       	std	Y+2, r25	; 0x02
    26a4:	89 83       	std	Y+1, r24	; 0x01
    26a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	9a 81       	ldd	r25, Y+2	; 0x02
    26b0:	82 17       	cp	r24, r18
    26b2:	93 07       	cpc	r25, r19
    26b4:	2c f2       	brlt	.-118    	; 0x2640 <dig1+0x138>
			 num1=num1*10;
		 num1=num1+(arr[i]-'0');

		}
		return num1;
    26b6:	8d 81       	ldd	r24, Y+5	; 0x05
    26b8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ba:	af 81       	ldd	r26, Y+7	; 0x07
    26bc:	b8 85       	ldd	r27, Y+8	; 0x08
    26be:	8c 87       	std	Y+12, r24	; 0x0c
    26c0:	9d 87       	std	Y+13, r25	; 0x0d
    26c2:	ae 87       	std	Y+14, r26	; 0x0e
    26c4:	bf 87       	std	Y+15, r27	; 0x0f
    26c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    26c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    26ca:	ae 85       	ldd	r26, Y+14	; 0x0e
    26cc:	bf 85       	ldd	r27, Y+15	; 0x0f

		}

}
    26ce:	bc 01       	movw	r22, r24
    26d0:	cd 01       	movw	r24, r26
    26d2:	2f 96       	adiw	r28, 0x0f	; 15
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	de bf       	out	0x3e, r29	; 62
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <dig2>:
s32 dig2(u8 arr[],u8 j)
{
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
    26ec:	2c 97       	sbiw	r28, 0x0c	; 12
    26ee:	0f b6       	in	r0, 0x3f	; 63
    26f0:	f8 94       	cli
    26f2:	de bf       	out	0x3e, r29	; 62
    26f4:	0f be       	out	0x3f, r0	; 63
    26f6:	cd bf       	out	0x3d, r28	; 61
    26f8:	9f 83       	std	Y+7, r25	; 0x07
    26fa:	8e 83       	std	Y+6, r24	; 0x06
    26fc:	68 87       	std	Y+8, r22	; 0x08
	s32 num2=0;
    26fe:	1a 82       	std	Y+2, r1	; 0x02
    2700:	1b 82       	std	Y+3, r1	; 0x03
    2702:	1c 82       	std	Y+4, r1	; 0x04
    2704:	1d 82       	std	Y+5, r1	; 0x05
	u8 i=j+1;
    2706:	88 85       	ldd	r24, Y+8	; 0x08
    2708:	8f 5f       	subi	r24, 0xFF	; 255
    270a:	89 83       	std	Y+1, r24	; 0x01
	if(arr[i]=='-')
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	8e 81       	ldd	r24, Y+6	; 0x06
    2714:	9f 81       	ldd	r25, Y+7	; 0x07
    2716:	fc 01       	movw	r30, r24
    2718:	e2 0f       	add	r30, r18
    271a:	f3 1f       	adc	r31, r19
    271c:	80 81       	ld	r24, Z
    271e:	8d 32       	cpi	r24, 0x2D	; 45
    2720:	09 f0       	breq	.+2      	; 0x2724 <dig2+0x40>
    2722:	75 c0       	rjmp	.+234    	; 0x280e <dig2+0x12a>
	{num2=num2+(arr[i+1]-'0');
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	88 2f       	mov	r24, r24
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	9c 01       	movw	r18, r24
    272c:	2f 5f       	subi	r18, 0xFF	; 255
    272e:	3f 4f       	sbci	r19, 0xFF	; 255
    2730:	8e 81       	ldd	r24, Y+6	; 0x06
    2732:	9f 81       	ldd	r25, Y+7	; 0x07
    2734:	fc 01       	movw	r30, r24
    2736:	e2 0f       	add	r30, r18
    2738:	f3 1f       	adc	r31, r19
    273a:	80 81       	ld	r24, Z
    273c:	88 2f       	mov	r24, r24
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	c0 97       	sbiw	r24, 0x30	; 48
    2742:	9c 01       	movw	r18, r24
    2744:	44 27       	eor	r20, r20
    2746:	37 fd       	sbrc	r19, 7
    2748:	40 95       	com	r20
    274a:	54 2f       	mov	r21, r20
    274c:	8a 81       	ldd	r24, Y+2	; 0x02
    274e:	9b 81       	ldd	r25, Y+3	; 0x03
    2750:	ac 81       	ldd	r26, Y+4	; 0x04
    2752:	bd 81       	ldd	r27, Y+5	; 0x05
    2754:	82 0f       	add	r24, r18
    2756:	93 1f       	adc	r25, r19
    2758:	a4 1f       	adc	r26, r20
    275a:	b5 1f       	adc	r27, r21
    275c:	8a 83       	std	Y+2, r24	; 0x02
    275e:	9b 83       	std	Y+3, r25	; 0x03
    2760:	ac 83       	std	Y+4, r26	; 0x04
    2762:	bd 83       	std	Y+5, r27	; 0x05
    2764:	35 c0       	rjmp	.+106    	; 0x27d0 <dig2+0xec>
	  while(arr[i+2]!='=')
	  {num2=num2*10;
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	9b 81       	ldd	r25, Y+3	; 0x03
    276a:	ac 81       	ldd	r26, Y+4	; 0x04
    276c:	bd 81       	ldd	r27, Y+5	; 0x05
    276e:	2a e0       	ldi	r18, 0x0A	; 10
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e0       	ldi	r20, 0x00	; 0
    2774:	50 e0       	ldi	r21, 0x00	; 0
    2776:	bc 01       	movw	r22, r24
    2778:	cd 01       	movw	r24, r26
    277a:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__mulsi3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	8a 83       	std	Y+2, r24	; 0x02
    2784:	9b 83       	std	Y+3, r25	; 0x03
    2786:	ac 83       	std	Y+4, r26	; 0x04
    2788:	bd 83       	std	Y+5, r27	; 0x05
	   num2=num2+(arr[i+2]-'0');
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	88 2f       	mov	r24, r24
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	9c 01       	movw	r18, r24
    2792:	2e 5f       	subi	r18, 0xFE	; 254
    2794:	3f 4f       	sbci	r19, 0xFF	; 255
    2796:	8e 81       	ldd	r24, Y+6	; 0x06
    2798:	9f 81       	ldd	r25, Y+7	; 0x07
    279a:	fc 01       	movw	r30, r24
    279c:	e2 0f       	add	r30, r18
    279e:	f3 1f       	adc	r31, r19
    27a0:	80 81       	ld	r24, Z
    27a2:	88 2f       	mov	r24, r24
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	c0 97       	sbiw	r24, 0x30	; 48
    27a8:	9c 01       	movw	r18, r24
    27aa:	44 27       	eor	r20, r20
    27ac:	37 fd       	sbrc	r19, 7
    27ae:	40 95       	com	r20
    27b0:	54 2f       	mov	r21, r20
    27b2:	8a 81       	ldd	r24, Y+2	; 0x02
    27b4:	9b 81       	ldd	r25, Y+3	; 0x03
    27b6:	ac 81       	ldd	r26, Y+4	; 0x04
    27b8:	bd 81       	ldd	r27, Y+5	; 0x05
    27ba:	82 0f       	add	r24, r18
    27bc:	93 1f       	adc	r25, r19
    27be:	a4 1f       	adc	r26, r20
    27c0:	b5 1f       	adc	r27, r21
    27c2:	8a 83       	std	Y+2, r24	; 0x02
    27c4:	9b 83       	std	Y+3, r25	; 0x03
    27c6:	ac 83       	std	Y+4, r26	; 0x04
    27c8:	bd 83       	std	Y+5, r27	; 0x05
	   i++;
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	8f 5f       	subi	r24, 0xFF	; 255
    27ce:	89 83       	std	Y+1, r24	; 0x01
{
	s32 num2=0;
	u8 i=j+1;
	if(arr[i]=='-')
	{num2=num2+(arr[i+1]-'0');
	  while(arr[i+2]!='=')
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	88 2f       	mov	r24, r24
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	9c 01       	movw	r18, r24
    27d8:	2e 5f       	subi	r18, 0xFE	; 254
    27da:	3f 4f       	sbci	r19, 0xFF	; 255
    27dc:	8e 81       	ldd	r24, Y+6	; 0x06
    27de:	9f 81       	ldd	r25, Y+7	; 0x07
    27e0:	fc 01       	movw	r30, r24
    27e2:	e2 0f       	add	r30, r18
    27e4:	f3 1f       	adc	r31, r19
    27e6:	80 81       	ld	r24, Z
    27e8:	8d 33       	cpi	r24, 0x3D	; 61
    27ea:	09 f0       	breq	.+2      	; 0x27ee <dig2+0x10a>
    27ec:	bc cf       	rjmp	.-136    	; 0x2766 <dig2+0x82>
	  {num2=num2*10;
	   num2=num2+(arr[i+2]-'0');
	   i++;
       }
	  return -num2;
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	9b 81       	ldd	r25, Y+3	; 0x03
    27f2:	ac 81       	ldd	r26, Y+4	; 0x04
    27f4:	bd 81       	ldd	r27, Y+5	; 0x05
    27f6:	22 27       	eor	r18, r18
    27f8:	33 27       	eor	r19, r19
    27fa:	a9 01       	movw	r20, r18
    27fc:	28 1b       	sub	r18, r24
    27fe:	39 0b       	sbc	r19, r25
    2800:	4a 0b       	sbc	r20, r26
    2802:	5b 0b       	sbc	r21, r27
    2804:	29 87       	std	Y+9, r18	; 0x09
    2806:	3a 87       	std	Y+10, r19	; 0x0a
    2808:	4b 87       	std	Y+11, r20	; 0x0b
    280a:	5c 87       	std	Y+12, r21	; 0x0c
    280c:	6a c0       	rjmp	.+212    	; 0x28e2 <dig2+0x1fe>
}
else
{

		num2=num2+(arr[i]-'0');
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	28 2f       	mov	r18, r24
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	8e 81       	ldd	r24, Y+6	; 0x06
    2816:	9f 81       	ldd	r25, Y+7	; 0x07
    2818:	fc 01       	movw	r30, r24
    281a:	e2 0f       	add	r30, r18
    281c:	f3 1f       	adc	r31, r19
    281e:	80 81       	ld	r24, Z
    2820:	88 2f       	mov	r24, r24
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	c0 97       	sbiw	r24, 0x30	; 48
    2826:	9c 01       	movw	r18, r24
    2828:	44 27       	eor	r20, r20
    282a:	37 fd       	sbrc	r19, 7
    282c:	40 95       	com	r20
    282e:	54 2f       	mov	r21, r20
    2830:	8a 81       	ldd	r24, Y+2	; 0x02
    2832:	9b 81       	ldd	r25, Y+3	; 0x03
    2834:	ac 81       	ldd	r26, Y+4	; 0x04
    2836:	bd 81       	ldd	r27, Y+5	; 0x05
    2838:	82 0f       	add	r24, r18
    283a:	93 1f       	adc	r25, r19
    283c:	a4 1f       	adc	r26, r20
    283e:	b5 1f       	adc	r27, r21
    2840:	8a 83       	std	Y+2, r24	; 0x02
    2842:	9b 83       	std	Y+3, r25	; 0x03
    2844:	ac 83       	std	Y+4, r26	; 0x04
    2846:	bd 83       	std	Y+5, r27	; 0x05
    2848:	35 c0       	rjmp	.+106    	; 0x28b4 <dig2+0x1d0>
		  while(arr[i+1]!='=')
		  {num2=num2*10;
    284a:	8a 81       	ldd	r24, Y+2	; 0x02
    284c:	9b 81       	ldd	r25, Y+3	; 0x03
    284e:	ac 81       	ldd	r26, Y+4	; 0x04
    2850:	bd 81       	ldd	r27, Y+5	; 0x05
    2852:	2a e0       	ldi	r18, 0x0A	; 10
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__mulsi3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	8a 83       	std	Y+2, r24	; 0x02
    2868:	9b 83       	std	Y+3, r25	; 0x03
    286a:	ac 83       	std	Y+4, r26	; 0x04
    286c:	bd 83       	std	Y+5, r27	; 0x05
		   num2=num2+(arr[i+1]-'0');
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	88 2f       	mov	r24, r24
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	9c 01       	movw	r18, r24
    2876:	2f 5f       	subi	r18, 0xFF	; 255
    2878:	3f 4f       	sbci	r19, 0xFF	; 255
    287a:	8e 81       	ldd	r24, Y+6	; 0x06
    287c:	9f 81       	ldd	r25, Y+7	; 0x07
    287e:	fc 01       	movw	r30, r24
    2880:	e2 0f       	add	r30, r18
    2882:	f3 1f       	adc	r31, r19
    2884:	80 81       	ld	r24, Z
    2886:	88 2f       	mov	r24, r24
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	c0 97       	sbiw	r24, 0x30	; 48
    288c:	9c 01       	movw	r18, r24
    288e:	44 27       	eor	r20, r20
    2890:	37 fd       	sbrc	r19, 7
    2892:	40 95       	com	r20
    2894:	54 2f       	mov	r21, r20
    2896:	8a 81       	ldd	r24, Y+2	; 0x02
    2898:	9b 81       	ldd	r25, Y+3	; 0x03
    289a:	ac 81       	ldd	r26, Y+4	; 0x04
    289c:	bd 81       	ldd	r27, Y+5	; 0x05
    289e:	82 0f       	add	r24, r18
    28a0:	93 1f       	adc	r25, r19
    28a2:	a4 1f       	adc	r26, r20
    28a4:	b5 1f       	adc	r27, r21
    28a6:	8a 83       	std	Y+2, r24	; 0x02
    28a8:	9b 83       	std	Y+3, r25	; 0x03
    28aa:	ac 83       	std	Y+4, r26	; 0x04
    28ac:	bd 83       	std	Y+5, r27	; 0x05
		   i++;
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	8f 5f       	subi	r24, 0xFF	; 255
    28b2:	89 83       	std	Y+1, r24	; 0x01
}
else
{

		num2=num2+(arr[i]-'0');
		  while(arr[i+1]!='=')
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	88 2f       	mov	r24, r24
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	9c 01       	movw	r18, r24
    28bc:	2f 5f       	subi	r18, 0xFF	; 255
    28be:	3f 4f       	sbci	r19, 0xFF	; 255
    28c0:	8e 81       	ldd	r24, Y+6	; 0x06
    28c2:	9f 81       	ldd	r25, Y+7	; 0x07
    28c4:	fc 01       	movw	r30, r24
    28c6:	e2 0f       	add	r30, r18
    28c8:	f3 1f       	adc	r31, r19
    28ca:	80 81       	ld	r24, Z
    28cc:	8d 33       	cpi	r24, 0x3D	; 61
    28ce:	09 f0       	breq	.+2      	; 0x28d2 <dig2+0x1ee>
    28d0:	bc cf       	rjmp	.-136    	; 0x284a <dig2+0x166>
		  {num2=num2*10;
		   num2=num2+(arr[i+1]-'0');
		   i++;
	       }
		  return num2;
    28d2:	8a 81       	ldd	r24, Y+2	; 0x02
    28d4:	9b 81       	ldd	r25, Y+3	; 0x03
    28d6:	ac 81       	ldd	r26, Y+4	; 0x04
    28d8:	bd 81       	ldd	r27, Y+5	; 0x05
    28da:	89 87       	std	Y+9, r24	; 0x09
    28dc:	9a 87       	std	Y+10, r25	; 0x0a
    28de:	ab 87       	std	Y+11, r26	; 0x0b
    28e0:	bc 87       	std	Y+12, r27	; 0x0c
    28e2:	89 85       	ldd	r24, Y+9	; 0x09
    28e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e6:	ab 85       	ldd	r26, Y+11	; 0x0b
    28e8:	bc 85       	ldd	r27, Y+12	; 0x0c

}
}
    28ea:	bc 01       	movw	r22, r24
    28ec:	cd 01       	movw	r24, r26
    28ee:	2c 96       	adiw	r28, 0x0c	; 12
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	f8 94       	cli
    28f4:	de bf       	out	0x3e, r29	; 62
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	cd bf       	out	0x3d, r28	; 61
    28fa:	cf 91       	pop	r28
    28fc:	df 91       	pop	r29
    28fe:	08 95       	ret

00002900 <HDIP_vDIPInit>:
 */
#include"../../LIB/STD_TYPES1.h"
#include"../../MCAL/dio/dio_init.h"
#include"DIP_init.h"
void  HDIP_vDIPInit(u8 A_u8PortNo, u8 A_u8PinNo)
{
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	00 d0       	rcall	.+0      	; 0x2906 <HDIP_vDIPInit+0x6>
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	89 83       	std	Y+1, r24	; 0x01
    290c:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_vSetBitDir( A_u8PortNo,  A_u8PinNo,DIO_INPUT);
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	6a 81       	ldd	r22, Y+2	; 0x02
    2912:	40 e0       	ldi	r20, 0x00	; 0
    2914:	0e 94 47 06 	call	0xc8e	; 0xc8e <MDIO_vSetBitDir>



}
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	cf 91       	pop	r28
    291e:	df 91       	pop	r29
    2920:	08 95       	ret

00002922 <HDIP_u8GetDIPVal>:
u8 HDIP_u8GetDIPVal(u8 A_u8PortNo, u8 A_u8PinNo)
{
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	00 d0       	rcall	.+0      	; 0x2928 <HDIP_u8GetDIPVal+0x6>
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	89 83       	std	Y+1, r24	; 0x01
    292e:	6a 83       	std	Y+2, r22	; 0x02

return MDIO_u8vGetBitVal( A_u8PortNo,  A_u8PinNo);
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	6a 81       	ldd	r22, Y+2	; 0x02
    2934:	0e 94 d5 07 	call	0xfaa	; 0xfaa <MDIO_u8vGetBitVal>

}
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	cf 91       	pop	r28
    293e:	df 91       	pop	r29
    2940:	08 95       	ret

00002942 <main>:
#include "../MCAL/dio/dio_init.h"
#include "../MCAL/dio/dio_reg.h"
#include<util\delay.h>
#include"../HALL/KDP/KDP_init.h"

void main(void){
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	6c 97       	sbiw	r28, 0x1c	; 28
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	f8 94       	cli
    2950:	de bf       	out	0x3e, r29	; 62
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	cd bf       	out	0x3d, r28	; 61
	HSSD_Init( DIO_PORTA ,DIO_PIN0 );
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	60 e0       	ldi	r22, 0x00	; 0
    295c:	70 e0       	ldi	r23, 0x00	; 0
    295e:	0e 94 95 09 	call	0x132a	; 0x132a <HSSD_Init>
	while(1){
	HLED_vLEDon(DIO_PORTA ,DIO_PIN0);
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	60 e0       	ldi	r22, 0x00	; 0
    2968:	70 e0       	ldi	r23, 0x00	; 0
    296a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <HLED_vLEDon>
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	aa e7       	ldi	r26, 0x7A	; 122
    2974:	b4 e4       	ldi	r27, 0x44	; 68
    2976:	89 8f       	std	Y+25, r24	; 0x19
    2978:	9a 8f       	std	Y+26, r25	; 0x1a
    297a:	ab 8f       	std	Y+27, r26	; 0x1b
    297c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297e:	69 8d       	ldd	r22, Y+25	; 0x19
    2980:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2982:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2984:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	4a e7       	ldi	r20, 0x7A	; 122
    298c:	53 e4       	ldi	r21, 0x43	; 67
    298e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	8d 8b       	std	Y+21, r24	; 0x15
    2998:	9e 8b       	std	Y+22, r25	; 0x16
    299a:	af 8b       	std	Y+23, r26	; 0x17
    299c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    299e:	6d 89       	ldd	r22, Y+21	; 0x15
    29a0:	7e 89       	ldd	r23, Y+22	; 0x16
    29a2:	8f 89       	ldd	r24, Y+23	; 0x17
    29a4:	98 8d       	ldd	r25, Y+24	; 0x18
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e8       	ldi	r20, 0x80	; 128
    29ac:	5f e3       	ldi	r21, 0x3F	; 63
    29ae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29b2:	88 23       	and	r24, r24
    29b4:	2c f4       	brge	.+10     	; 0x29c0 <main+0x7e>
		__ticks = 1;
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	9c 8b       	std	Y+20, r25	; 0x14
    29bc:	8b 8b       	std	Y+19, r24	; 0x13
    29be:	3f c0       	rjmp	.+126    	; 0x2a3e <main+0xfc>
	else if (__tmp > 65535)
    29c0:	6d 89       	ldd	r22, Y+21	; 0x15
    29c2:	7e 89       	ldd	r23, Y+22	; 0x16
    29c4:	8f 89       	ldd	r24, Y+23	; 0x17
    29c6:	98 8d       	ldd	r25, Y+24	; 0x18
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	3f ef       	ldi	r19, 0xFF	; 255
    29cc:	4f e7       	ldi	r20, 0x7F	; 127
    29ce:	57 e4       	ldi	r21, 0x47	; 71
    29d0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29d4:	18 16       	cp	r1, r24
    29d6:	4c f5       	brge	.+82     	; 0x2a2a <main+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d8:	69 8d       	ldd	r22, Y+25	; 0x19
    29da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e2       	ldi	r20, 0x20	; 32
    29e6:	51 e4       	ldi	r21, 0x41	; 65
    29e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	bc 01       	movw	r22, r24
    29f2:	cd 01       	movw	r24, r26
    29f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	9c 8b       	std	Y+20, r25	; 0x14
    29fe:	8b 8b       	std	Y+19, r24	; 0x13
    2a00:	0f c0       	rjmp	.+30     	; 0x2a20 <main+0xde>
    2a02:	89 e1       	ldi	r24, 0x19	; 25
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	9a 8b       	std	Y+18, r25	; 0x12
    2a08:	89 8b       	std	Y+17, r24	; 0x11
    2a0a:	89 89       	ldd	r24, Y+17	; 0x11
    2a0c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	f1 f7       	brne	.-4      	; 0x2a0e <main+0xcc>
    2a12:	9a 8b       	std	Y+18, r25	; 0x12
    2a14:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a16:	8b 89       	ldd	r24, Y+19	; 0x13
    2a18:	9c 89       	ldd	r25, Y+20	; 0x14
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	9c 8b       	std	Y+20, r25	; 0x14
    2a1e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a20:	8b 89       	ldd	r24, Y+19	; 0x13
    2a22:	9c 89       	ldd	r25, Y+20	; 0x14
    2a24:	00 97       	sbiw	r24, 0x00	; 0
    2a26:	69 f7       	brne	.-38     	; 0x2a02 <main+0xc0>
    2a28:	14 c0       	rjmp	.+40     	; 0x2a52 <main+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a30:	98 8d       	ldd	r25, Y+24	; 0x18
    2a32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	9c 8b       	std	Y+20, r25	; 0x14
    2a3c:	8b 8b       	std	Y+19, r24	; 0x13
    2a3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a40:	9c 89       	ldd	r25, Y+20	; 0x14
    2a42:	98 8b       	std	Y+16, r25	; 0x10
    2a44:	8f 87       	std	Y+15, r24	; 0x0f
    2a46:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a48:	98 89       	ldd	r25, Y+16	; 0x10
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	f1 f7       	brne	.-4      	; 0x2a4a <main+0x108>
    2a4e:	98 8b       	std	Y+16, r25	; 0x10
    2a50:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_ms(1000);
     HLED_vLEDoff(DIO_PORTA ,DIO_PIN0);
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	60 e0       	ldi	r22, 0x00	; 0
    2a58:	70 e0       	ldi	r23, 0x00	; 0
    2a5a:	0e 94 07 0a 	call	0x140e	; 0x140e <HLED_vLEDoff>
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	aa e7       	ldi	r26, 0x7A	; 122
    2a64:	b4 e4       	ldi	r27, 0x44	; 68
    2a66:	8b 87       	std	Y+11, r24	; 0x0b
    2a68:	9c 87       	std	Y+12, r25	; 0x0c
    2a6a:	ad 87       	std	Y+13, r26	; 0x0d
    2a6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	4a e7       	ldi	r20, 0x7A	; 122
    2a7c:	53 e4       	ldi	r21, 0x43	; 67
    2a7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	8f 83       	std	Y+7, r24	; 0x07
    2a88:	98 87       	std	Y+8, r25	; 0x08
    2a8a:	a9 87       	std	Y+9, r26	; 0x09
    2a8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a90:	78 85       	ldd	r23, Y+8	; 0x08
    2a92:	89 85       	ldd	r24, Y+9	; 0x09
    2a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e8       	ldi	r20, 0x80	; 128
    2a9c:	5f e3       	ldi	r21, 0x3F	; 63
    2a9e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2aa2:	88 23       	and	r24, r24
    2aa4:	2c f4       	brge	.+10     	; 0x2ab0 <main+0x16e>
		__ticks = 1;
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	9e 83       	std	Y+6, r25	; 0x06
    2aac:	8d 83       	std	Y+5, r24	; 0x05
    2aae:	3f c0       	rjmp	.+126    	; 0x2b2e <main+0x1ec>
	else if (__tmp > 65535)
    2ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab2:	78 85       	ldd	r23, Y+8	; 0x08
    2ab4:	89 85       	ldd	r24, Y+9	; 0x09
    2ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	3f ef       	ldi	r19, 0xFF	; 255
    2abc:	4f e7       	ldi	r20, 0x7F	; 127
    2abe:	57 e4       	ldi	r21, 0x47	; 71
    2ac0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2ac4:	18 16       	cp	r1, r24
    2ac6:	4c f5       	brge	.+82     	; 0x2b1a <main+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2acc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ace:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	40 e2       	ldi	r20, 0x20	; 32
    2ad6:	51 e4       	ldi	r21, 0x41	; 65
    2ad8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	9e 83       	std	Y+6, r25	; 0x06
    2aee:	8d 83       	std	Y+5, r24	; 0x05
    2af0:	0f c0       	rjmp	.+30     	; 0x2b10 <main+0x1ce>
    2af2:	89 e1       	ldi	r24, 0x19	; 25
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	9c 83       	std	Y+4, r25	; 0x04
    2af8:	8b 83       	std	Y+3, r24	; 0x03
    2afa:	8b 81       	ldd	r24, Y+3	; 0x03
    2afc:	9c 81       	ldd	r25, Y+4	; 0x04
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	f1 f7       	brne	.-4      	; 0x2afe <main+0x1bc>
    2b02:	9c 83       	std	Y+4, r25	; 0x04
    2b04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b06:	8d 81       	ldd	r24, Y+5	; 0x05
    2b08:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	9e 83       	std	Y+6, r25	; 0x06
    2b0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b10:	8d 81       	ldd	r24, Y+5	; 0x05
    2b12:	9e 81       	ldd	r25, Y+6	; 0x06
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	69 f7       	brne	.-38     	; 0x2af2 <main+0x1b0>
    2b18:	24 cf       	rjmp	.-440    	; 0x2962 <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b1c:	78 85       	ldd	r23, Y+8	; 0x08
    2b1e:	89 85       	ldd	r24, Y+9	; 0x09
    2b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	9e 83       	std	Y+6, r25	; 0x06
    2b2c:	8d 83       	std	Y+5, r24	; 0x05
    2b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b30:	9e 81       	ldd	r25, Y+6	; 0x06
    2b32:	9a 83       	std	Y+2, r25	; 0x02
    2b34:	89 83       	std	Y+1, r24	; 0x01
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <main+0x1f8>
    2b3e:	9a 83       	std	Y+2, r25	; 0x02
    2b40:	89 83       	std	Y+1, r24	; 0x01
    2b42:	0f cf       	rjmp	.-482    	; 0x2962 <main+0x20>

00002b44 <__mulsi3>:
    2b44:	62 9f       	mul	r22, r18
    2b46:	d0 01       	movw	r26, r0
    2b48:	73 9f       	mul	r23, r19
    2b4a:	f0 01       	movw	r30, r0
    2b4c:	82 9f       	mul	r24, r18
    2b4e:	e0 0d       	add	r30, r0
    2b50:	f1 1d       	adc	r31, r1
    2b52:	64 9f       	mul	r22, r20
    2b54:	e0 0d       	add	r30, r0
    2b56:	f1 1d       	adc	r31, r1
    2b58:	92 9f       	mul	r25, r18
    2b5a:	f0 0d       	add	r31, r0
    2b5c:	83 9f       	mul	r24, r19
    2b5e:	f0 0d       	add	r31, r0
    2b60:	74 9f       	mul	r23, r20
    2b62:	f0 0d       	add	r31, r0
    2b64:	65 9f       	mul	r22, r21
    2b66:	f0 0d       	add	r31, r0
    2b68:	99 27       	eor	r25, r25
    2b6a:	72 9f       	mul	r23, r18
    2b6c:	b0 0d       	add	r27, r0
    2b6e:	e1 1d       	adc	r30, r1
    2b70:	f9 1f       	adc	r31, r25
    2b72:	63 9f       	mul	r22, r19
    2b74:	b0 0d       	add	r27, r0
    2b76:	e1 1d       	adc	r30, r1
    2b78:	f9 1f       	adc	r31, r25
    2b7a:	bd 01       	movw	r22, r26
    2b7c:	cf 01       	movw	r24, r30
    2b7e:	11 24       	eor	r1, r1
    2b80:	08 95       	ret

00002b82 <__divmodsi4>:
    2b82:	97 fb       	bst	r25, 7
    2b84:	09 2e       	mov	r0, r25
    2b86:	05 26       	eor	r0, r21
    2b88:	0e d0       	rcall	.+28     	; 0x2ba6 <__divmodsi4_neg1>
    2b8a:	57 fd       	sbrc	r21, 7
    2b8c:	04 d0       	rcall	.+8      	; 0x2b96 <__divmodsi4_neg2>
    2b8e:	14 d0       	rcall	.+40     	; 0x2bb8 <__udivmodsi4>
    2b90:	0a d0       	rcall	.+20     	; 0x2ba6 <__divmodsi4_neg1>
    2b92:	00 1c       	adc	r0, r0
    2b94:	38 f4       	brcc	.+14     	; 0x2ba4 <__divmodsi4_exit>

00002b96 <__divmodsi4_neg2>:
    2b96:	50 95       	com	r21
    2b98:	40 95       	com	r20
    2b9a:	30 95       	com	r19
    2b9c:	21 95       	neg	r18
    2b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba0:	4f 4f       	sbci	r20, 0xFF	; 255
    2ba2:	5f 4f       	sbci	r21, 0xFF	; 255

00002ba4 <__divmodsi4_exit>:
    2ba4:	08 95       	ret

00002ba6 <__divmodsi4_neg1>:
    2ba6:	f6 f7       	brtc	.-4      	; 0x2ba4 <__divmodsi4_exit>
    2ba8:	90 95       	com	r25
    2baa:	80 95       	com	r24
    2bac:	70 95       	com	r23
    2bae:	61 95       	neg	r22
    2bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb2:	8f 4f       	sbci	r24, 0xFF	; 255
    2bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb6:	08 95       	ret

00002bb8 <__udivmodsi4>:
    2bb8:	a1 e2       	ldi	r26, 0x21	; 33
    2bba:	1a 2e       	mov	r1, r26
    2bbc:	aa 1b       	sub	r26, r26
    2bbe:	bb 1b       	sub	r27, r27
    2bc0:	fd 01       	movw	r30, r26
    2bc2:	0d c0       	rjmp	.+26     	; 0x2bde <__udivmodsi4_ep>

00002bc4 <__udivmodsi4_loop>:
    2bc4:	aa 1f       	adc	r26, r26
    2bc6:	bb 1f       	adc	r27, r27
    2bc8:	ee 1f       	adc	r30, r30
    2bca:	ff 1f       	adc	r31, r31
    2bcc:	a2 17       	cp	r26, r18
    2bce:	b3 07       	cpc	r27, r19
    2bd0:	e4 07       	cpc	r30, r20
    2bd2:	f5 07       	cpc	r31, r21
    2bd4:	20 f0       	brcs	.+8      	; 0x2bde <__udivmodsi4_ep>
    2bd6:	a2 1b       	sub	r26, r18
    2bd8:	b3 0b       	sbc	r27, r19
    2bda:	e4 0b       	sbc	r30, r20
    2bdc:	f5 0b       	sbc	r31, r21

00002bde <__udivmodsi4_ep>:
    2bde:	66 1f       	adc	r22, r22
    2be0:	77 1f       	adc	r23, r23
    2be2:	88 1f       	adc	r24, r24
    2be4:	99 1f       	adc	r25, r25
    2be6:	1a 94       	dec	r1
    2be8:	69 f7       	brne	.-38     	; 0x2bc4 <__udivmodsi4_loop>
    2bea:	60 95       	com	r22
    2bec:	70 95       	com	r23
    2bee:	80 95       	com	r24
    2bf0:	90 95       	com	r25
    2bf2:	9b 01       	movw	r18, r22
    2bf4:	ac 01       	movw	r20, r24
    2bf6:	bd 01       	movw	r22, r26
    2bf8:	cf 01       	movw	r24, r30
    2bfa:	08 95       	ret

00002bfc <__prologue_saves__>:
    2bfc:	2f 92       	push	r2
    2bfe:	3f 92       	push	r3
    2c00:	4f 92       	push	r4
    2c02:	5f 92       	push	r5
    2c04:	6f 92       	push	r6
    2c06:	7f 92       	push	r7
    2c08:	8f 92       	push	r8
    2c0a:	9f 92       	push	r9
    2c0c:	af 92       	push	r10
    2c0e:	bf 92       	push	r11
    2c10:	cf 92       	push	r12
    2c12:	df 92       	push	r13
    2c14:	ef 92       	push	r14
    2c16:	ff 92       	push	r15
    2c18:	0f 93       	push	r16
    2c1a:	1f 93       	push	r17
    2c1c:	cf 93       	push	r28
    2c1e:	df 93       	push	r29
    2c20:	cd b7       	in	r28, 0x3d	; 61
    2c22:	de b7       	in	r29, 0x3e	; 62
    2c24:	ca 1b       	sub	r28, r26
    2c26:	db 0b       	sbc	r29, r27
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	09 94       	ijmp

00002c34 <__epilogue_restores__>:
    2c34:	2a 88       	ldd	r2, Y+18	; 0x12
    2c36:	39 88       	ldd	r3, Y+17	; 0x11
    2c38:	48 88       	ldd	r4, Y+16	; 0x10
    2c3a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c3c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c3e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c40:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c42:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c44:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c46:	b9 84       	ldd	r11, Y+9	; 0x09
    2c48:	c8 84       	ldd	r12, Y+8	; 0x08
    2c4a:	df 80       	ldd	r13, Y+7	; 0x07
    2c4c:	ee 80       	ldd	r14, Y+6	; 0x06
    2c4e:	fd 80       	ldd	r15, Y+5	; 0x05
    2c50:	0c 81       	ldd	r16, Y+4	; 0x04
    2c52:	1b 81       	ldd	r17, Y+3	; 0x03
    2c54:	aa 81       	ldd	r26, Y+2	; 0x02
    2c56:	b9 81       	ldd	r27, Y+1	; 0x01
    2c58:	ce 0f       	add	r28, r30
    2c5a:	d1 1d       	adc	r29, r1
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	de bf       	out	0x3e, r29	; 62
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	cd bf       	out	0x3d, r28	; 61
    2c66:	ed 01       	movw	r28, r26
    2c68:	08 95       	ret

00002c6a <_exit>:
    2c6a:	f8 94       	cli

00002c6c <__stop_program>:
    2c6c:	ff cf       	rjmp	.-2      	; 0x2c6c <__stop_program>
